
Electric_Water_Heater_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000038ce  00003962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080016a  0080016a  00003a6c  2**0
                  ALLOC
  3 .stab         00004314  00000000  00000000  00003a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c48  00000000  00000000  00007d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000099c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000c3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000eb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000ed68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f06f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fa89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__vector_1>
       8:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__vector_2>
       c:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 1b 	call	0x36ee	; 0x36ee <main>
      8a:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 de 1b 	jmp	0x37bc	; 0x37bc <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <timer0_init>:
#include "timer.h"


/*function to set timer 0 mode*/
EN_Timer_Error_t timer0_init(u8 mode)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <timer0_init+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <timer0_init+0x8>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01
	Bit  3 6
	//   0 0   Normal
	0 1   PWM, Phase Correct
	1 0   CTC OCR0
	1 1   Fast PWM*/ 
	switch(mode)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3c 83       	std	Y+4, r19	; 0x04
     f00:	2b 83       	std	Y+3, r18	; 0x03
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	21 f1       	breq	.+72     	; 0xf54 <timer0_init+0x6a>
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <timer0_init+0x36>
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	61 f0       	breq	.+24     	; 0xf36 <timer0_init+0x4c>
     f1e:	47 c0       	rjmp	.+142    	; 0xfae <timer0_init+0xc4>
     f20:	2b 81       	ldd	r18, Y+3	; 0x03
     f22:	3c 81       	ldd	r19, Y+4	; 0x04
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	21 f1       	breq	.+72     	; 0xf72 <timer0_init+0x88>
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	71 f1       	breq	.+92     	; 0xf90 <timer0_init+0xa6>
     f34:	3c c0       	rjmp	.+120    	; 0xfae <timer0_init+0xc4>
	{
		/*overflow mode*/
		case OVERFLOW_MODE: // 0 0
		CLR_BIT(TCCR0,3);
     f36:	a3 e5       	ldi	r26, 0x53	; 83
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	87 7f       	andi	r24, 0xF7	; 247
     f42:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     f44:	a3 e5       	ldi	r26, 0x53	; 83
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e3 e5       	ldi	r30, 0x53	; 83
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7b       	andi	r24, 0xBF	; 191
     f50:	8c 93       	st	X, r24
     f52:	30 c0       	rjmp	.+96     	; 0xfb4 <timer0_init+0xca>
		break;
		/*compare mode*/
		case CTC_MODE:// 1 0
		SET_BIT(TCCR0,3);
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     f62:	a3 e5       	ldi	r26, 0x53	; 83
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7b       	andi	r24, 0xBF	; 191
     f6e:	8c 93       	st	X, r24
     f70:	21 c0       	rjmp	.+66     	; 0xfb4 <timer0_init+0xca>
		break;
		/*fast pwm mode */
		case FAST_PWM_MODE: // 1 1
		SET_BIT(TCCR0,3);
     f72:	a3 e5       	ldi	r26, 0x53	; 83
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e3 e5       	ldi	r30, 0x53	; 83
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 60       	ori	r24, 0x08	; 8
     f7e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
     f80:	a3 e5       	ldi	r26, 0x53	; 83
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e3 e5       	ldi	r30, 0x53	; 83
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	8c 93       	st	X, r24
     f8e:	12 c0       	rjmp	.+36     	; 0xfb4 <timer0_init+0xca>
		break;
		/*pwm with ohase correct mode*/
		case PWM_PHASE_CORRECT_MODE: // 0 1
		CLR_BIT(TCCR0,3);
     f90:	a3 e5       	ldi	r26, 0x53	; 83
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e3 e5       	ldi	r30, 0x53	; 83
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
     f9e:	a3 e5       	ldi	r26, 0x53	; 83
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e3 e5       	ldi	r30, 0x53	; 83
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	8c 93       	st	X, r24
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <timer0_init+0xca>
		break;
		/*if not found return not ok*/
		default:
		return TIMER_NOT_OK;
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <timer0_init+0xd2>
		break;	
	}
	/*set intial value of data reg to zero*/
	TCNT0 = 0;
     fb4:	e2 e5       	ldi	r30, 0x52	; 82
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	10 82       	st	Z, r1
	/*if the function did not return not ok till now then it is ok*/
	return TIMER_OK;
     fba:	1a 82       	std	Y+2, r1	; 0x02
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <timer0_start>:

/*function set prescaler so that timer start*/
EN_Timer_Error_t timer0_start(u8 prescaler)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <timer0_start+0x6>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <timer0_start+0x8>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	89 83       	std	Y+1, r24	; 0x01
	clk/no prescaler  0 0 1
	clk/8             0 1 0
	clk/64            0 1 1
	clk/256           1 0 0
	clk/1024          1 0 1*/
	switch (prescaler)
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3c 83       	std	Y+4, r19	; 0x04
     fe2:	2b 83       	std	Y+3, r18	; 0x03
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	91 05       	cpc	r25, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <timer0_start+0x24>
     fee:	49 c0       	rjmp	.+146    	; 0x1082 <timer0_start+0xb6>
     ff0:	2b 81       	ldd	r18, Y+3	; 0x03
     ff2:	3c 81       	ldd	r19, Y+4	; 0x04
     ff4:	24 30       	cpi	r18, 0x04	; 4
     ff6:	31 05       	cpc	r19, r1
     ff8:	5c f4       	brge	.+22     	; 0x1010 <timer0_start+0x44>
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	99 f0       	breq	.+38     	; 0x102a <timer0_start+0x5e>
    1004:	2b 81       	ldd	r18, Y+3	; 0x03
    1006:	3c 81       	ldd	r19, Y+4	; 0x04
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	21 f1       	breq	.+72     	; 0x1056 <timer0_start+0x8a>
    100e:	7b c0       	rjmp	.+246    	; 0x1106 <timer0_start+0x13a>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <timer0_start+0x50>
    101a:	49 c0       	rjmp	.+146    	; 0x10ae <timer0_start+0xe2>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	25 30       	cpi	r18, 0x05	; 5
    1022:	31 05       	cpc	r19, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <timer0_start+0x5c>
    1026:	59 c0       	rjmp	.+178    	; 0x10da <timer0_start+0x10e>
    1028:	6e c0       	rjmp	.+220    	; 0x1106 <timer0_start+0x13a>
	{
		/*if no pre*/
		case NO_PRE:  // 0 0 1
		SET_BIT(TCCR0,0);
    102a:	a3 e5       	ldi	r26, 0x53	; 83
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e3 e5       	ldi	r30, 0x53	; 83
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    1038:	a3 e5       	ldi	r26, 0x53	; 83
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e3 e5       	ldi	r30, 0x53	; 83
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8d 7f       	andi	r24, 0xFD	; 253
    1044:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,2);
    1046:	a3 e5       	ldi	r26, 0x53	; 83
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e3 e5       	ldi	r30, 0x53	; 83
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8b 7f       	andi	r24, 0xFB	; 251
    1052:	8c 93       	st	X, r24
    1054:	5b c0       	rjmp	.+182    	; 0x110c <timer0_start+0x140>
		break; 
		/*if pre is  8*/
		case PRE8: // 0 1 0
		CLR_BIT(TCCR0,0);
    1056:	a3 e5       	ldi	r26, 0x53	; 83
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e3 e5       	ldi	r30, 0x53	; 83
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8e 7f       	andi	r24, 0xFE	; 254
    1062:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,2);
    1072:	a3 e5       	ldi	r26, 0x53	; 83
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e3 e5       	ldi	r30, 0x53	; 83
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8b 7f       	andi	r24, 0xFB	; 251
    107e:	8c 93       	st	X, r24
    1080:	45 c0       	rjmp	.+138    	; 0x110c <timer0_start+0x140>
		break;
		/*if pre is 64*/
		case PRE64:  // 0 1 1
		SET_BIT(TCCR0,0);
    1082:	a3 e5       	ldi	r26, 0x53	; 83
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e5       	ldi	r30, 0x53	; 83
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	82 60       	ori	r24, 0x02	; 2
    109c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,2);
    109e:	a3 e5       	ldi	r26, 0x53	; 83
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e3 e5       	ldi	r30, 0x53	; 83
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8b 7f       	andi	r24, 0xFB	; 251
    10aa:	8c 93       	st	X, r24
    10ac:	2f c0       	rjmp	.+94     	; 0x110c <timer0_start+0x140>
		break;
		/*pre 256*/
		case PRE256: // 1 0 0
		CLR_BIT(TCCR0,0);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8e 7f       	andi	r24, 0xFE	; 254
    10ba:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    10bc:	a3 e5       	ldi	r26, 0x53	; 83
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e5       	ldi	r30, 0x53	; 83
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8d 7f       	andi	r24, 0xFD	; 253
    10c8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    10ca:	a3 e5       	ldi	r26, 0x53	; 83
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e3 e5       	ldi	r30, 0x53	; 83
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	8c 93       	st	X, r24
    10d8:	19 c0       	rjmp	.+50     	; 0x110c <timer0_start+0x140>
		break;
		/*pre 1024*/
		case PRE1024:// 1 0 1
		SET_BIT(TCCR0,0);
    10da:	a3 e5       	ldi	r26, 0x53	; 83
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e5       	ldi	r30, 0x53	; 83
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    10e8:	a3 e5       	ldi	r26, 0x53	; 83
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e3 e5       	ldi	r30, 0x53	; 83
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8d 7f       	andi	r24, 0xFD	; 253
    10f4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    10f6:	a3 e5       	ldi	r26, 0x53	; 83
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e3 e5       	ldi	r30, 0x53	; 83
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	84 60       	ori	r24, 0x04	; 4
    1102:	8c 93       	st	X, r24
    1104:	03 c0       	rjmp	.+6      	; 0x110c <timer0_start+0x140>
		break;
		/*if not found return not ok*/
		default:
		return TIMER_NOT_OK;
    1106:	31 e0       	ldi	r19, 0x01	; 1
    1108:	3a 83       	std	Y+2, r19	; 0x02
    110a:	01 c0       	rjmp	.+2      	; 0x110e <timer0_start+0x142>
		break;
	}
	/*if the function did not return not ok till now then it is ok*/
	return TIMER_OK;
    110c:	1a 82       	std	Y+2, r1	; 0x02
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <timer0_intial_val>:


/*function to write intial value on timer0 data reg */
EN_Timer_Error_t timer0_intial_val(u8 initialval)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	89 83       	std	Y+1, r24	; 0x01
	/*set TCNT0 equal the value*/
	TCNT0 = initialval;
    112a:	e2 e5       	ldi	r30, 0x52	; 82
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	80 83       	st	Z, r24
	/*this function will always return ok*/
	return TIMER_OK;
    1132:	80 e0       	ldi	r24, 0x00	; 0
}
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <timer0_stop>:


/*function to stop the timer*/
EN_Timer_Error_t timer0_stop(void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	// 0 0 0
	/*clear bit 0 , 1 and 2 in TCCR0 reg */
	CLR_BIT(TCCR0,0);
    1144:	a3 e5       	ldi	r26, 0x53	; 83
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e3 e5       	ldi	r30, 0x53	; 83
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8e 7f       	andi	r24, 0xFE	; 254
    1150:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    1152:	a3 e5       	ldi	r26, 0x53	; 83
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e3 e5       	ldi	r30, 0x53	; 83
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8d 7f       	andi	r24, 0xFD	; 253
    115e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
    1160:	a3 e5       	ldi	r26, 0x53	; 83
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e3 e5       	ldi	r30, 0x53	; 83
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8b 7f       	andi	r24, 0xFB	; 251
    116c:	8c 93       	st	X, r24
	/*this function will always return ok*/
	return TIMER_OK;
    116e:	80 e0       	ldi	r24, 0x00	; 0
}
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <counter0_start>:


/*function to set timer0 as counter*/
EN_Timer_Error_t counter0_start(u8 mode)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <counter0_start+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <counter0_start+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
	/*switch on mode
	if falling clear bit 0 and set bit 1 and 2 in TCCR0 reg
	if rising set bit 0,1 and 2 in TCCR0 reg */
	switch(mode)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3c 83       	std	Y+4, r19	; 0x04
    118c:	2b 83       	std	Y+3, r18	; 0x03
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	86 30       	cpi	r24, 0x06	; 6
    1194:	91 05       	cpc	r25, r1
    1196:	31 f0       	breq	.+12     	; 0x11a4 <counter0_start+0x2e>
    1198:	2b 81       	ldd	r18, Y+3	; 0x03
    119a:	3c 81       	ldd	r19, Y+4	; 0x04
    119c:	27 30       	cpi	r18, 0x07	; 7
    119e:	31 05       	cpc	r19, r1
    11a0:	b9 f0       	breq	.+46     	; 0x11d0 <counter0_start+0x5a>
    11a2:	2c c0       	rjmp	.+88     	; 0x11fc <counter0_start+0x86>
	{
		/*if on falling*/
		case EX_FALL:// 1 1 0
		CLR_BIT(TCCR0,0);
    11a4:	a3 e5       	ldi	r26, 0x53	; 83
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e3 e5       	ldi	r30, 0x53	; 83
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8e 7f       	andi	r24, 0xFE	; 254
    11b0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    11b2:	a3 e5       	ldi	r26, 0x53	; 83
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e3 e5       	ldi	r30, 0x53	; 83
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	82 60       	ori	r24, 0x02	; 2
    11be:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    11c0:	a3 e5       	ldi	r26, 0x53	; 83
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e3 e5       	ldi	r30, 0x53	; 83
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	84 60       	ori	r24, 0x04	; 4
    11cc:	8c 93       	st	X, r24
    11ce:	19 c0       	rjmp	.+50     	; 0x1202 <counter0_start+0x8c>
		break;
		/*if on rising*/
		case EX_RIS:// 1 1 1
		SET_BIT(TCCR0,0);
    11d0:	a3 e5       	ldi	r26, 0x53	; 83
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e3 e5       	ldi	r30, 0x53	; 83
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    11de:	a3 e5       	ldi	r26, 0x53	; 83
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e3 e5       	ldi	r30, 0x53	; 83
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    11ec:	a3 e5       	ldi	r26, 0x53	; 83
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e3 e5       	ldi	r30, 0x53	; 83
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	84 60       	ori	r24, 0x04	; 4
    11f8:	8c 93       	st	X, r24
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <counter0_start+0x8c>
		break;
		/*if not found return not ok*/
		default:
		return TIMER_NOT_OK;
    11fc:	31 e0       	ldi	r19, 0x01	; 1
    11fe:	3a 83       	std	Y+2, r19	; 0x02
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <counter0_start+0x8e>
		break;
	}
	/*if the function did not return not ok till now then it is ok*/
	return TIMER_OK;
    1202:	1a 82       	std	Y+2, r1	; 0x02
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <timer0_wait_for_flag>:

/*timer0_wait_for_flag function is used to busy wait on the flag*/
EN_Timer_Error_t timer0_wait_for_flag(u8 flag)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <timer0_wait_for_flag+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <timer0_wait_for_flag+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
	/*switch on flag
	when found busy wait on it then clear the flag*/
	switch(flag)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3c 83       	std	Y+4, r19	; 0x04
    122a:	2b 83       	std	Y+3, r18	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	31 f0       	breq	.+12     	; 0x1240 <timer0_wait_for_flag+0x2c>
    1234:	2b 81       	ldd	r18, Y+3	; 0x03
    1236:	3c 81       	ldd	r19, Y+4	; 0x04
    1238:	21 30       	cpi	r18, 0x01	; 1
    123a:	31 05       	cpc	r19, r1
    123c:	91 f0       	breq	.+36     	; 0x1262 <timer0_wait_for_flag+0x4e>
    123e:	23 c0       	rjmp	.+70     	; 0x1286 <timer0_wait_for_flag+0x72>
	{
		/*if overflow flag*/
		case OVERFLOW_FLAG: // 0 0
		while(!GET_BIT(TIFR,0));  // busy wait 
    1240:	e8 e5       	ldi	r30, 0x58	; 88
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	81 70       	andi	r24, 0x01	; 1
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	b9 f3       	breq	.-18     	; 0x1240 <timer0_wait_for_flag+0x2c>
		SET_BIT(TIFR,0); // clear flag
    1252:	a8 e5       	ldi	r26, 0x58	; 88
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e5       	ldi	r30, 0x58	; 88
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	8c 93       	st	X, r24
    1260:	15 c0       	rjmp	.+42     	; 0x128c <timer0_wait_for_flag+0x78>
		break;
		/*if compare flag*/
		case OUT_COMPARE_FLAG:// 1 0
		while(!GET_BIT(TIFR,1));
    1262:	e8 e5       	ldi	r30, 0x58	; 88
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	86 95       	lsr	r24
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	81 70       	andi	r24, 0x01	; 1
    1270:	90 70       	andi	r25, 0x00	; 0
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	b1 f3       	breq	.-20     	; 0x1262 <timer0_wait_for_flag+0x4e>
		SET_BIT(TIFR,1); // clear flag
    1276:	a8 e5       	ldi	r26, 0x58	; 88
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e5       	ldi	r30, 0x58	; 88
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	82 60       	ori	r24, 0x02	; 2
    1282:	8c 93       	st	X, r24
    1284:	03 c0       	rjmp	.+6      	; 0x128c <timer0_wait_for_flag+0x78>
		break;
		/*if not found return not ok*/
		default:
		return TIMER_NOT_OK;
    1286:	31 e0       	ldi	r19, 0x01	; 1
    1288:	3a 83       	std	Y+2, r19	; 0x02
    128a:	01 c0       	rjmp	.+2      	; 0x128e <timer0_wait_for_flag+0x7a>
		break;
	}
	/*if the function did not return not ok till now then it is ok*/
	return TIMER_OK;
    128c:	1a 82       	std	Y+2, r1	; 0x02
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <timer0_status>:


/*timer0_status is used to get the current timer value
it takes pointer to value*/
EN_Timer_Error_t timer0_status(u8 *val)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <timer0_status+0x6>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9a 83       	std	Y+2, r25	; 0x02
    12aa:	89 83       	std	Y+1, r24	; 0x01
	/*set pointer to value equal timer value reg */
	*val = TCNT0;
    12ac:	e2 e5       	ldi	r30, 0x52	; 82
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
	/*this function will always return ok*/
	return TIMER_OK;
    12b8:	80 e0       	ldi	r24, 0x00	; 0
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <timer0_interrupt>:


EN_Timer_Error_t timer0_interrupt(u8 mode)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <timer0_interrupt+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <timer0_interrupt+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3c 83       	std	Y+4, r19	; 0x04
    12da:	2b 83       	std	Y+3, r18	; 0x03
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	31 f0       	breq	.+12     	; 0x12f0 <timer0_interrupt+0x2c>
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	21 30       	cpi	r18, 0x01	; 1
    12ea:	31 05       	cpc	r19, r1
    12ec:	49 f0       	breq	.+18     	; 0x1300 <timer0_interrupt+0x3c>
    12ee:	10 c0       	rjmp	.+32     	; 0x1310 <timer0_interrupt+0x4c>
	{
		case OVERFLOW_MODE:
		SET_BIT(TIMSK,0);
    12f0:	a9 e5       	ldi	r26, 0x59	; 89
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e9 e5       	ldi	r30, 0x59	; 89
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	8c 93       	st	X, r24
    12fe:	0b c0       	rjmp	.+22     	; 0x1316 <timer0_interrupt+0x52>
		break;
		case CTC_MODE:
		SET_BIT(TIMSK,1);
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 e5       	ldi	r30, 0x59	; 89
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	8c 93       	st	X, r24
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <timer0_interrupt+0x52>
		break;
		default:
		return TIMER_NOT_OK;
    1310:	31 e0       	ldi	r19, 0x01	; 1
    1312:	3a 83       	std	Y+2, r19	; 0x02
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <timer0_interrupt+0x54>
		break;
	} 
	return TIMER_OK;
    1316:	1a 82       	std	Y+2, r1	; 0x02
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <delay>:


/*delay is a function that takes number of overflow and prescaler to set timer to it*/
EN_Timer_Error_t delay(u8 pre,u8 OverflowNumber)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <delay+0x6>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	8a 83       	std	Y+2, r24	; 0x02
    1336:	6b 83       	std	Y+3, r22	; 0x03
	/*declare counter */
	u8 count = 0;
    1338:	19 82       	std	Y+1, r1	; 0x01
	/*set timer0 with the passed prescaler*/
	timer0_start(pre);
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <timer0_start>
    1340:	06 c0       	rjmp	.+12     	; 0x134e <delay+0x26>
	/*enter a loop till we reach the needed over flows number so
	we reached the needed delay*/
	while (count < OverflowNumber)
	{
		timer0_wait_for_flag(OVERFLOW_FLAG);
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	0e 94 0a 09 	call	0x1214	; 0x1214 <timer0_wait_for_flag>
		count++;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	89 83       	std	Y+1, r24	; 0x01
	u8 count = 0;
	/*set timer0 with the passed prescaler*/
	timer0_start(pre);
	/*enter a loop till we reach the needed over flows number so
	we reached the needed delay*/
	while (count < OverflowNumber)
    134e:	99 81       	ldd	r25, Y+1	; 0x01
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	98 17       	cp	r25, r24
    1354:	b0 f3       	brcs	.-20     	; 0x1342 <delay+0x1a>
	{
		timer0_wait_for_flag(OVERFLOW_FLAG);
		count++;
	}
	// stop the timer 
	timer0_stop();
    1356:	0e 94 9e 08 	call	0x113c	; 0x113c <timer0_stop>
	/*this function will always return ok*/
	return TIMER_OK;
    135a:	80 e0       	ldi	r24, 0x00	; 0
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <TWI_Init>:

#include "TWI_interface.h"

void TWI_Init(void)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate:  kbps using zero pre-scaler TWPS=00 and F_CPU=1Mhz */
    TWBR = 0x02;
    1370:	e0 e2       	ldi	r30, 0x20	; 32
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	80 83       	st	Z, r24
	TWSR = 0x00;
    1378:	e1 e2       	ldi	r30, 0x21	; 33
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    137e:	e2 e2       	ldi	r30, 0x22	; 34
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1386:	e6 e5       	ldi	r30, 0x56	; 86
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	80 83       	st	Z, r24
}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <TWI_Start>:

void TWI_Start(void)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    139c:	e6 e5       	ldi	r30, 0x56	; 86
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	84 ea       	ldi	r24, 0xA4	; 164
    13a2:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13a4:	e6 e5       	ldi	r30, 0x56	; 86
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	dc f7       	brge	.-10     	; 0x13a4 <TWI_Start+0x10>

}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TWI_Stop>:

void TWI_Stop(void)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    13bc:	e6 e5       	ldi	r30, 0x56	; 86
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	84 e9       	ldi	r24, 0x94	; 148
    13c2:	80 83       	st	Z, r24
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <TWI_Write>:

void TWI_Write(unsigned char data)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    13d6:	e3 e2       	ldi	r30, 0x23	; 35
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    13de:	e6 e5       	ldi	r30, 0x56	; 86
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	84 e8       	ldi	r24, 0x84	; 132
    13e4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13e6:	e6 e5       	ldi	r30, 0x56	; 86
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	88 23       	and	r24, r24
    13ee:	dc f7       	brge	.-10     	; 0x13e6 <TWI_Write+0x1c>
}
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <TWI_Read_With_ACK>:

unsigned char TWI_Read_With_ACK(void)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1400:	e6 e5       	ldi	r30, 0x56	; 86
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	84 ec       	ldi	r24, 0xC4	; 196
    1406:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1408:	e6 e5       	ldi	r30, 0x56	; 86
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 23       	and	r24, r24
    1410:	dc f7       	brge	.-10     	; 0x1408 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    1412:	e3 e2       	ldi	r30, 0x23	; 35
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <TWI_Read_With_NACK>:

unsigned char TWI_Read_With_NACK(void)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1426:	e6 e5       	ldi	r30, 0x56	; 86
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	84 e8       	ldi	r24, 0x84	; 132
    142c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    142e:	e6 e5       	ldi	r30, 0x56	; 86
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 23       	and	r24, r24
    1436:	dc f7       	brge	.-10     	; 0x142e <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    1438:	e3 e2       	ldi	r30, 0x23	; 35
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
}
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <TWI_Get_Status>:

unsigned char TWI_Get_Status(void)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    144e:	e1 e2       	ldi	r30, 0x21	; 33
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	88 7f       	andi	r24, 0xF8	; 248
    1456:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
}
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <global_interrupt_state>:


/*global_interrupt_state is used to set the state of the SREG bit 7 which is 
global interrupt pin and it takes the state*/
EN_INT_Error_t global_interrupt_state(u8 state)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
	/*check if state is enable set else clear*/
	if (state == ENABLE)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	41 f4       	brne	.+16     	; 0x1484 <global_interrupt_state+0x22>
	{
		SET_BIT(SREG,7);
    1474:	af e5       	ldi	r26, 0x5F	; 95
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ef e5       	ldi	r30, 0x5F	; 95
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 68       	ori	r24, 0x80	; 128
    1480:	8c 93       	st	X, r24
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <global_interrupt_state+0x30>
	}
	else
	{
		CLR_BIT(SREG,7);
    1484:	af e5       	ldi	r26, 0x5F	; 95
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ef e5       	ldi	r30, 0x5F	; 95
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 77       	andi	r24, 0x7F	; 127
    1490:	8c 93       	st	X, r24
	}
	/*this function will always do its function so it will always return ok*/
	return INT_OK;
    1492:	80 e0       	ldi	r24, 0x00	; 0
}
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <interrupt_init>:


/*interrupt_init function is used to initialize one of the external interrupt
it takes the id of the interrupt and the mode of it */
EN_INT_Error_t interrupt_init(u8 id,u8 mode)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <interrupt_init+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <interrupt_init+0x8>
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6a 83       	std	Y+2, r22	; 0x02
	/*enable global interrupt */
	global_interrupt_state(ENABLE);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	0e 94 31 0a 	call	0x1462	; 0x1462 <global_interrupt_state>
	if mode is rising then set bit 0 and 1 in MCUCR reg and set enable bit in GICR
	if non return not ok
	for external interrupt 2 check for the mode 
	if mode is falling then clear bit 6 in MCUCSR reg and set enable bit in GICR
	if mode is falling then set bit 6 in MCUCSR reg and set enable bit in GICR*/
	switch(id)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3d 83       	std	Y+5, r19	; 0x05
    14bc:	2c 83       	std	Y+4, r18	; 0x04
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <interrupt_init+0x2e>
    14c8:	72 c0       	rjmp	.+228    	; 0x15ae <interrupt_init+0x112>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <interrupt_init+0x3a>
    14d4:	d3 c0       	rjmp	.+422    	; 0x167c <interrupt_init+0x1e0>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <interrupt_init+0x44>
    14de:	f5 c0       	rjmp	.+490    	; 0x16ca <interrupt_init+0x22e>
	{
		/*if external interrupt 0 then check for mode */
		case EX_INT0:
		if (mode == LOW_MODE)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	88 23       	and	r24, r24
    14e4:	b1 f4       	brne	.+44     	; 0x1512 <interrupt_init+0x76>
		{
			CLR_BIT(MCUCR,0);
    14e6:	a5 e5       	ldi	r26, 0x55	; 85
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e5       	ldi	r30, 0x55	; 85
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8d 7f       	andi	r24, 0xFD	; 253
    1500:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    1502:	ab e5       	ldi	r26, 0x5B	; 91
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e5       	ldi	r30, 0x5B	; 91
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 64       	ori	r24, 0x40	; 64
    150e:	8c 93       	st	X, r24
    1510:	df c0       	rjmp	.+446    	; 0x16d0 <interrupt_init+0x234>
		}
		else if (mode == ANY_CHANGE_MODE)
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	b1 f4       	brne	.+44     	; 0x1544 <interrupt_init+0xa8>
		{
			SET_BIT(MCUCR,0);
    1518:	a5 e5       	ldi	r26, 0x55	; 85
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e5       	ldi	r30, 0x55	; 85
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	81 60       	ori	r24, 0x01	; 1
    1524:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8d 7f       	andi	r24, 0xFD	; 253
    1532:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    1534:	ab e5       	ldi	r26, 0x5B	; 91
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	eb e5       	ldi	r30, 0x5B	; 91
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 64       	ori	r24, 0x40	; 64
    1540:	8c 93       	st	X, r24
    1542:	c6 c0       	rjmp	.+396    	; 0x16d0 <interrupt_init+0x234>
		}
		else if (mode == FALLING_MODE)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	b1 f4       	brne	.+44     	; 0x1576 <interrupt_init+0xda>
		{
			CLR_BIT(MCUCR,0);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8e 7f       	andi	r24, 0xFE	; 254
    1556:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	82 60       	ori	r24, 0x02	; 2
    1564:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    1566:	ab e5       	ldi	r26, 0x5B	; 91
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e5       	ldi	r30, 0x5B	; 91
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 64       	ori	r24, 0x40	; 64
    1572:	8c 93       	st	X, r24
    1574:	ad c0       	rjmp	.+346    	; 0x16d0 <interrupt_init+0x234>
		}
		else if (mode == RISING_MODE)
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	b1 f4       	brne	.+44     	; 0x15a8 <interrupt_init+0x10c>
		{
			SET_BIT(MCUCR,0);
    157c:	a5 e5       	ldi	r26, 0x55	; 85
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e5 e5       	ldi	r30, 0x55	; 85
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	81 60       	ori	r24, 0x01	; 1
    1588:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    158a:	a5 e5       	ldi	r26, 0x55	; 85
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e5       	ldi	r30, 0x55	; 85
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	82 60       	ori	r24, 0x02	; 2
    1596:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    1598:	ab e5       	ldi	r26, 0x5B	; 91
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e5       	ldi	r30, 0x5B	; 91
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 64       	ori	r24, 0x40	; 64
    15a4:	8c 93       	st	X, r24
    15a6:	94 c0       	rjmp	.+296    	; 0x16d0 <interrupt_init+0x234>
		}
		else
		{
			return INT_NOT_OK;
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	9b 83       	std	Y+3, r25	; 0x03
    15ac:	92 c0       	rjmp	.+292    	; 0x16d2 <interrupt_init+0x236>
		}
		break;
		/*if external interrupt 1 then check for mode */
		case EX_INT1:
		if (mode == LOW_MODE)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	88 23       	and	r24, r24
    15b2:	b1 f4       	brne	.+44     	; 0x15e0 <interrupt_init+0x144>
		{
			CLR_BIT(MCUCR,2);
    15b4:	a5 e5       	ldi	r26, 0x55	; 85
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e5       	ldi	r30, 0x55	; 85
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8b 7f       	andi	r24, 0xFB	; 251
    15c0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	87 7f       	andi	r24, 0xF7	; 247
    15ce:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    15d0:	ab e5       	ldi	r26, 0x5B	; 91
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e5       	ldi	r30, 0x5B	; 91
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 68       	ori	r24, 0x80	; 128
    15dc:	8c 93       	st	X, r24
    15de:	78 c0       	rjmp	.+240    	; 0x16d0 <interrupt_init+0x234>
		}
		else if (mode == ANY_CHANGE_MODE)
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	b1 f4       	brne	.+44     	; 0x1612 <interrupt_init+0x176>
		{
			SET_BIT(MCUCR,2);
    15e6:	a5 e5       	ldi	r26, 0x55	; 85
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e5 e5       	ldi	r30, 0x55	; 85
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	84 60       	ori	r24, 0x04	; 4
    15f2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    15f4:	a5 e5       	ldi	r26, 0x55	; 85
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e5 e5       	ldi	r30, 0x55	; 85
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	87 7f       	andi	r24, 0xF7	; 247
    1600:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    1602:	ab e5       	ldi	r26, 0x5B	; 91
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	eb e5       	ldi	r30, 0x5B	; 91
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	8c 93       	st	X, r24
    1610:	5f c0       	rjmp	.+190    	; 0x16d0 <interrupt_init+0x234>
		}
		else if (mode == FALLING_MODE)
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	b1 f4       	brne	.+44     	; 0x1644 <interrupt_init+0x1a8>
		{
			CLR_BIT(MCUCR,2);
    1618:	a5 e5       	ldi	r26, 0x55	; 85
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e5 e5       	ldi	r30, 0x55	; 85
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8b 7f       	andi	r24, 0xFB	; 251
    1624:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1626:	a5 e5       	ldi	r26, 0x55	; 85
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e5       	ldi	r30, 0x55	; 85
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	88 60       	ori	r24, 0x08	; 8
    1632:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    1634:	ab e5       	ldi	r26, 0x5B	; 91
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	eb e5       	ldi	r30, 0x5B	; 91
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	80 68       	ori	r24, 0x80	; 128
    1640:	8c 93       	st	X, r24
    1642:	46 c0       	rjmp	.+140    	; 0x16d0 <interrupt_init+0x234>
		}
		else if (mode == RISING_MODE)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	b1 f4       	brne	.+44     	; 0x1676 <interrupt_init+0x1da>
		{
			SET_BIT(MCUCR,2);
    164a:	a5 e5       	ldi	r26, 0x55	; 85
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e5       	ldi	r30, 0x55	; 85
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	84 60       	ori	r24, 0x04	; 4
    1656:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1658:	a5 e5       	ldi	r26, 0x55	; 85
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e5       	ldi	r30, 0x55	; 85
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	88 60       	ori	r24, 0x08	; 8
    1664:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    1666:	ab e5       	ldi	r26, 0x5B	; 91
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	eb e5       	ldi	r30, 0x5B	; 91
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	8c 93       	st	X, r24
    1674:	2d c0       	rjmp	.+90     	; 0x16d0 <interrupt_init+0x234>
		}
		else
		{
			return INT_NOT_OK;
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	2b 83       	std	Y+3, r18	; 0x03
    167a:	2b c0       	rjmp	.+86     	; 0x16d2 <interrupt_init+0x236>
		}
		break;
		/*if external interrupt 2 then check for mode */
		case EX_INT2:
		if (mode == FALLING_MODE)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	79 f4       	brne	.+30     	; 0x16a0 <interrupt_init+0x204>
		{
			CLR_BIT(MCUCSR,6);
    1682:	a4 e5       	ldi	r26, 0x54	; 84
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e4 e5       	ldi	r30, 0x54	; 84
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8f 7b       	andi	r24, 0xBF	; 191
    168e:	8c 93       	st	X, r24
			SET_BIT(GICR,5);
    1690:	ab e5       	ldi	r26, 0x5B	; 91
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	eb e5       	ldi	r30, 0x5B	; 91
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 62       	ori	r24, 0x20	; 32
    169c:	8c 93       	st	X, r24
    169e:	18 c0       	rjmp	.+48     	; 0x16d0 <interrupt_init+0x234>
		}
		else if (mode == RISING_MODE)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	79 f4       	brne	.+30     	; 0x16c4 <interrupt_init+0x228>
		{
			SET_BIT(MCUCSR,6);
    16a6:	a4 e5       	ldi	r26, 0x54	; 84
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e4 e5       	ldi	r30, 0x54	; 84
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	8c 93       	st	X, r24
			SET_BIT(GICR,5);
    16b4:	ab e5       	ldi	r26, 0x5B	; 91
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	eb e5       	ldi	r30, 0x5B	; 91
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 62       	ori	r24, 0x20	; 32
    16c0:	8c 93       	st	X, r24
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <interrupt_init+0x234>
		}
		else
		{
			return INT_NOT_OK;
    16c4:	31 e0       	ldi	r19, 0x01	; 1
    16c6:	3b 83       	std	Y+3, r19	; 0x03
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <interrupt_init+0x236>
		}
		break;
		/*if no interrupt found then return not ok*/
		default:
		return INT_NOT_OK;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <interrupt_init+0x236>
		break;
	}
	/*if the function did not return not ok till now then it is ok*/
	return INT_OK;
    16d0:	1b 82       	std	Y+3, r1	; 0x03
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <interrupt_wait_for_flag>:


/*interrupt_wait_for_flag function is used to busy wait on the flag if needed
and it takes the id of the external interrupt*/
EN_INT_Error_t interrupt_wait_for_flag(u8 id)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <interrupt_wait_for_flag+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <interrupt_wait_for_flag+0x8>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	89 83       	std	Y+1, r24	; 0x01
	/*switch on the id*/
	/*for any of it busy wait on its flag then clear the flag*/
	switch(id)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3c 83       	std	Y+4, r19	; 0x04
    16fa:	2b 83       	std	Y+3, r18	; 0x03
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	f1 f0       	breq	.+60     	; 0x1742 <interrupt_wait_for_flag+0x5e>
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	31 f1       	breq	.+76     	; 0x175c <interrupt_wait_for_flag+0x78>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	b1 f5       	brne	.+108    	; 0x1784 <interrupt_wait_for_flag+0xa0>
	{
		/*if external interrupt 0*/
		case EX_INT0:
		while(!GET_BIT(GIFR,6));
    1718:	ea e5       	ldi	r30, 0x5A	; 90
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	82 95       	swap	r24
    1720:	86 95       	lsr	r24
    1722:	86 95       	lsr	r24
    1724:	83 70       	andi	r24, 0x03	; 3
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	81 70       	andi	r24, 0x01	; 1
    172c:	90 70       	andi	r25, 0x00	; 0
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	99 f3       	breq	.-26     	; 0x1718 <interrupt_wait_for_flag+0x34>
		SET_BIT(GIFR,6);
    1732:	aa e5       	ldi	r26, 0x5A	; 90
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ea e5       	ldi	r30, 0x5A	; 90
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	8c 93       	st	X, r24
    1740:	24 c0       	rjmp	.+72     	; 0x178a <interrupt_wait_for_flag+0xa6>
		break;
		/*if external interrupt 1*/
		case EX_INT1:
		while(!GET_BIT(GIFR,7));
    1742:	ea e5       	ldi	r30, 0x5A	; 90
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	88 23       	and	r24, r24
    174a:	dc f7       	brge	.-10     	; 0x1742 <interrupt_wait_for_flag+0x5e>
		SET_BIT(GIFR,7);
    174c:	aa e5       	ldi	r26, 0x5A	; 90
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ea e5       	ldi	r30, 0x5A	; 90
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	80 68       	ori	r24, 0x80	; 128
    1758:	8c 93       	st	X, r24
    175a:	17 c0       	rjmp	.+46     	; 0x178a <interrupt_wait_for_flag+0xa6>
		break;
		/*if external interrupt 2*/
		case EX_INT2:
		while(!GET_BIT(GIFR,5));
    175c:	ea e5       	ldi	r30, 0x5A	; 90
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	82 95       	swap	r24
    1764:	86 95       	lsr	r24
    1766:	87 70       	andi	r24, 0x07	; 7
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	a1 f3       	breq	.-24     	; 0x175c <interrupt_wait_for_flag+0x78>
		SET_BIT(GIFR,5);
    1774:	aa e5       	ldi	r26, 0x5A	; 90
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ea e5       	ldi	r30, 0x5A	; 90
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 62       	ori	r24, 0x20	; 32
    1780:	8c 93       	st	X, r24
    1782:	03 c0       	rjmp	.+6      	; 0x178a <interrupt_wait_for_flag+0xa6>
		break;
		/*if not found return not ok*/
		default:
		return INT_NOT_OK;
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	01 c0       	rjmp	.+2      	; 0x178c <interrupt_wait_for_flag+0xa8>
		break;
	}
	/*if the function did not return not ok till now then it is ok*/
	return INT_OK;
    178a:	1a 82       	std	Y+2, r1	; 0x02
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <interrupt_enable>:


/*interrupt_enable function is used to enable the interrupt and it takes the id */
EN_INT_Error_t interrupt_enable(u8 id)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <interrupt_enable+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <interrupt_enable+0x8>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	89 83       	std	Y+1, r24	; 0x01
	/*switch on the id of the external interrupt
	when found set it is enable bit */
	switch(id)
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	3c 83       	std	Y+4, r19	; 0x04
    17b2:	2b 83       	std	Y+3, r18	; 0x03
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	89 f0       	breq	.+34     	; 0x17e0 <interrupt_enable+0x44>
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	3c 81       	ldd	r19, Y+4	; 0x04
    17c2:	22 30       	cpi	r18, 0x02	; 2
    17c4:	31 05       	cpc	r19, r1
    17c6:	a1 f0       	breq	.+40     	; 0x17f0 <interrupt_enable+0x54>
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	c1 f4       	brne	.+48     	; 0x1800 <interrupt_enable+0x64>
	{
		/*if external interrupt 0*/
		case EX_INT0:
		SET_BIT(GICR,6);
    17d0:	ab e5       	ldi	r26, 0x5B	; 91
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	eb e5       	ldi	r30, 0x5B	; 91
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 64       	ori	r24, 0x40	; 64
    17dc:	8c 93       	st	X, r24
    17de:	13 c0       	rjmp	.+38     	; 0x1806 <interrupt_enable+0x6a>
		break;
		/*if external interrupt 1*/
		case EX_INT1:
		SET_BIT(GICR,7);
    17e0:	ab e5       	ldi	r26, 0x5B	; 91
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	eb e5       	ldi	r30, 0x5B	; 91
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 68       	ori	r24, 0x80	; 128
    17ec:	8c 93       	st	X, r24
    17ee:	0b c0       	rjmp	.+22     	; 0x1806 <interrupt_enable+0x6a>
		break;
		/*if external interrupt 2*/
		case EX_INT2:
		SET_BIT(GICR,5);
    17f0:	ab e5       	ldi	r26, 0x5B	; 91
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e5       	ldi	r30, 0x5B	; 91
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 62       	ori	r24, 0x20	; 32
    17fc:	8c 93       	st	X, r24
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <interrupt_enable+0x6a>
		break;
		/*if not found return not ok*/
		default:
		return INT_NOT_OK;
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <interrupt_enable+0x6c>
		break;
	}
	/*if the function did not return not ok till now then it is ok*/
	return INT_OK;
    1806:	1a 82       	std	Y+2, r1	; 0x02
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <interrupt_disable>:

/*interrupt_disable function is used to disable the interrupt and it takes the id */
EN_INT_Error_t interrupt_disable(u8 id)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <interrupt_disable+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <interrupt_disable+0x8>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
	/*switch on the id of the external interrupt
	when found clear it is enable bit */
	switch(id)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3c 83       	std	Y+4, r19	; 0x04
    182e:	2b 83       	std	Y+3, r18	; 0x03
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	89 f0       	breq	.+34     	; 0x185c <interrupt_disable+0x44>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	a1 f0       	breq	.+40     	; 0x186c <interrupt_disable+0x54>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	c1 f4       	brne	.+48     	; 0x187c <interrupt_disable+0x64>
	{
		/*if external interrupt 0*/
		case EX_INT0:
		CLR_BIT(GICR,6);
    184c:	ab e5       	ldi	r26, 0x5B	; 91
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e5       	ldi	r30, 0x5B	; 91
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8f 7b       	andi	r24, 0xBF	; 191
    1858:	8c 93       	st	X, r24
    185a:	13 c0       	rjmp	.+38     	; 0x1882 <interrupt_disable+0x6a>
		break;
		/*if external interrupt 1*/
		case EX_INT1:
		CLR_BIT(GICR,7);
    185c:	ab e5       	ldi	r26, 0x5B	; 91
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	eb e5       	ldi	r30, 0x5B	; 91
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8f 77       	andi	r24, 0x7F	; 127
    1868:	8c 93       	st	X, r24
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <interrupt_disable+0x6a>
		break;
		/*if external interrupt 2*/
		case EX_INT2:
		CLR_BIT(GICR,5);
    186c:	ab e5       	ldi	r26, 0x5B	; 91
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	eb e5       	ldi	r30, 0x5B	; 91
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8f 7d       	andi	r24, 0xDF	; 223
    1878:	8c 93       	st	X, r24
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <interrupt_disable+0x6a>
		break;
		/*if not found return not ok*/
		default:
		return INT_NOT_OK;
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <interrupt_disable+0x6c>
		break;
	}
	/*if the function did not return not ok till now then it is ok*/
	return INT_OK;
    1882:	1a 82       	std	Y+2, r1	; 0x02
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <DIO_setPortDir>:

/*********function of port************/


void DIO_setPortDir(u8 PORTID,u8 portDir)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <DIO_setPortDir+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <DIO_setPortDir+0x8>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORTID)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	3c 83       	std	Y+4, r19	; 0x04
    18ac:	2b 83       	std	Y+3, r18	; 0x03
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	d1 f0       	breq	.+52     	; 0x18ec <DIO_setPortDir+0x58>
    18b8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ba:	3c 81       	ldd	r19, Y+4	; 0x04
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	2c f4       	brge	.+10     	; 0x18cc <DIO_setPortDir+0x38>
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <DIO_setPortDir+0x4e>
    18ca:	1e c0       	rjmp	.+60     	; 0x1908 <DIO_setPortDir+0x74>
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	3c 81       	ldd	r19, Y+4	; 0x04
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <DIO_setPortDir+0x62>
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	81 f0       	breq	.+32     	; 0x1900 <DIO_setPortDir+0x6c>
    18e0:	13 c0       	rjmp	.+38     	; 0x1908 <DIO_setPortDir+0x74>
	{
	case A: DDRA=portDir;
    18e2:	ea e3       	ldi	r30, 0x3A	; 58
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	0e c0       	rjmp	.+28     	; 0x1908 <DIO_setPortDir+0x74>
		break;
	case B: DDRB=portDir;
    18ec:	e7 e3       	ldi	r30, 0x37	; 55
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <DIO_setPortDir+0x74>
		break;
	case C: DDRC=portDir;
    18f6:	e4 e3       	ldi	r30, 0x34	; 52
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <DIO_setPortDir+0x74>
		break;
	case D: DDRD=portDir;
    1900:	e1 e3       	ldi	r30, 0x31	; 49
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	80 83       	st	Z, r24
		break;
	default:/*do no thing*/
		break;
	}
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <DIO_setPortval>:


void DIO_setPortval(u8 PORTID,u8 portval)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <DIO_setPortval+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <DIO_setPortval+0x8>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORTID)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3c 83       	std	Y+4, r19	; 0x04
    192e:	2b 83       	std	Y+3, r18	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	d1 f0       	breq	.+52     	; 0x196e <DIO_setPortval+0x58>
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <DIO_setPortval+0x38>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	61 f0       	breq	.+24     	; 0x1964 <DIO_setPortval+0x4e>
    194c:	1e c0       	rjmp	.+60     	; 0x198a <DIO_setPortval+0x74>
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	3c 81       	ldd	r19, Y+4	; 0x04
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	81 f0       	breq	.+32     	; 0x1978 <DIO_setPortval+0x62>
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	91 05       	cpc	r25, r1
    1960:	81 f0       	breq	.+32     	; 0x1982 <DIO_setPortval+0x6c>
    1962:	13 c0       	rjmp	.+38     	; 0x198a <DIO_setPortval+0x74>
		{
		case A: PORTA=portval;
    1964:	eb e3       	ldi	r30, 0x3B	; 59
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
    196c:	0e c0       	rjmp	.+28     	; 0x198a <DIO_setPortval+0x74>
			break;
		case B: PORTB=portval;
    196e:	e8 e3       	ldi	r30, 0x38	; 56
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 83       	st	Z, r24
    1976:	09 c0       	rjmp	.+18     	; 0x198a <DIO_setPortval+0x74>
			break;
		case C: PORTC=portval;
    1978:	e5 e3       	ldi	r30, 0x35	; 53
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	80 83       	st	Z, r24
    1980:	04 c0       	rjmp	.+8      	; 0x198a <DIO_setPortval+0x74>
			break;
		case D: PORTD=portval;
    1982:	e2 e3       	ldi	r30, 0x32	; 50
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
			break;
		default:/*do no thing*/
			break;
		}
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <DIO_getPortval>:


u8 DIO_getPortval(u8 PORTID)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <DIO_getPortval+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <DIO_getPortval+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 portval = 0;
    19a6:	19 82       	std	Y+1, r1	; 0x01
	switch(PORTID)
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3c 83       	std	Y+4, r19	; 0x04
    19b0:	2b 83       	std	Y+3, r18	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	91 05       	cpc	r25, r1
    19ba:	d1 f0       	breq	.+52     	; 0x19f0 <DIO_getPortval+0x58>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <DIO_getPortval+0x38>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 f0       	breq	.+24     	; 0x19e6 <DIO_getPortval+0x4e>
    19ce:	1e c0       	rjmp	.+60     	; 0x1a0c <DIO_getPortval+0x74>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	81 f0       	breq	.+32     	; 0x19fa <DIO_getPortval+0x62>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	81 f0       	breq	.+32     	; 0x1a04 <DIO_getPortval+0x6c>
    19e4:	13 c0       	rjmp	.+38     	; 0x1a0c <DIO_getPortval+0x74>
			{
			case A: portval=PINA;
    19e6:	e9 e3       	ldi	r30, 0x39	; 57
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	0e c0       	rjmp	.+28     	; 0x1a0c <DIO_getPortval+0x74>
				break;
			case B: portval=PINB;
    19f0:	e6 e3       	ldi	r30, 0x36	; 54
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <DIO_getPortval+0x74>
				break;
			case C: portval=PINC;
    19fa:	e3 e3       	ldi	r30, 0x33	; 51
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <DIO_getPortval+0x74>
				break;
			case D: portval=PIND;
    1a04:	e0 e3       	ldi	r30, 0x30	; 48
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	89 83       	std	Y+1, r24	; 0x01
				break;
			default:/*do no thing*/
				break;
			}
	return portval;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <DIO_setPinDir>:


/*********function of Pin************/
void DIO_setPinDir(u8 PORTID,u8 PINID,u8 Dir)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	27 97       	sbiw	r28, 0x07	; 7
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	6a 83       	std	Y+2, r22	; 0x02
    1a34:	4b 83       	std	Y+3, r20	; 0x03
	if(Dir == OUT)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <DIO_setPinDir+0x22>
    1a3c:	6f c0       	rjmp	.+222    	; 0x1b1c <DIO_setPinDir+0x100>
	{
		switch(PORTID)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3f 83       	std	Y+7, r19	; 0x07
    1a46:	2e 83       	std	Y+6, r18	; 0x06
    1a48:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	49 f1       	breq	.+82     	; 0x1aa4 <DIO_setPinDir+0x88>
    1a52:	2e 81       	ldd	r18, Y+6	; 0x06
    1a54:	3f 81       	ldd	r19, Y+7	; 0x07
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <DIO_setPinDir+0x4a>
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <DIO_setPinDir+0x60>
    1a64:	d2 c0       	rjmp	.+420    	; 0x1c0a <DIO_setPinDir+0x1ee>
    1a66:	2e 81       	ldd	r18, Y+6	; 0x06
    1a68:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	71 f1       	breq	.+92     	; 0x1acc <DIO_setPinDir+0xb0>
    1a70:	8e 81       	ldd	r24, Y+6	; 0x06
    1a72:	9f 81       	ldd	r25, Y+7	; 0x07
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	e9 f1       	breq	.+122    	; 0x1af4 <DIO_setPinDir+0xd8>
    1a7a:	c7 c0       	rjmp	.+398    	; 0x1c0a <DIO_setPinDir+0x1ee>
				{
				case A: SET_BIT(DDRA, PINID);
    1a7c:	aa e3       	ldi	r26, 0x3A	; 58
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ea e3       	ldi	r30, 0x3A	; 58
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <DIO_setPinDir+0x7e>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <DIO_setPinDir+0x7a>
    1a9e:	84 2b       	or	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	b3 c0       	rjmp	.+358    	; 0x1c0a <DIO_setPinDir+0x1ee>
					break;
				case B: SET_BIT(DDRB, PINID);
    1aa4:	a7 e3       	ldi	r26, 0x37	; 55
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e7 e3       	ldi	r30, 0x37	; 55
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_setPinDir+0xa6>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_setPinDir+0xa2>
    1ac6:	84 2b       	or	r24, r20
    1ac8:	8c 93       	st	X, r24
    1aca:	9f c0       	rjmp	.+318    	; 0x1c0a <DIO_setPinDir+0x1ee>
					break;
				case C: SET_BIT(DDRC, PINID);
    1acc:	a4 e3       	ldi	r26, 0x34	; 52
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e4 e3       	ldi	r30, 0x34	; 52
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_setPinDir+0xce>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <DIO_setPinDir+0xca>
    1aee:	84 2b       	or	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	8b c0       	rjmp	.+278    	; 0x1c0a <DIO_setPinDir+0x1ee>
					break;
				case D: SET_BIT(DDRD, PINID);
    1af4:	a1 e3       	ldi	r26, 0x31	; 49
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e1 e3       	ldi	r30, 0x31	; 49
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_setPinDir+0xf6>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_setPinDir+0xf2>
    1b16:	84 2b       	or	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	77 c0       	rjmp	.+238    	; 0x1c0a <DIO_setPinDir+0x1ee>
					break;
				default:/*do no thing*/
					break;
				}
	}
	else if(Dir == IN)
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	88 23       	and	r24, r24
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <DIO_setPinDir+0x108>
    1b22:	73 c0       	rjmp	.+230    	; 0x1c0a <DIO_setPinDir+0x1ee>
	{
		switch(PORTID)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	3d 83       	std	Y+5, r19	; 0x05
    1b2c:	2c 83       	std	Y+4, r18	; 0x04
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	91 05       	cpc	r25, r1
    1b36:	59 f1       	breq	.+86     	; 0x1b8e <DIO_setPinDir+0x172>
    1b38:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	2c f4       	brge	.+10     	; 0x1b4c <DIO_setPinDir+0x130>
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f0       	breq	.+26     	; 0x1b64 <DIO_setPinDir+0x148>
    1b4a:	5f c0       	rjmp	.+190    	; 0x1c0a <DIO_setPinDir+0x1ee>
    1b4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	89 f1       	breq	.+98     	; 0x1bb8 <DIO_setPinDir+0x19c>
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	83 30       	cpi	r24, 0x03	; 3
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <DIO_setPinDir+0x146>
    1b60:	40 c0       	rjmp	.+128    	; 0x1be2 <DIO_setPinDir+0x1c6>
    1b62:	53 c0       	rjmp	.+166    	; 0x1c0a <DIO_setPinDir+0x1ee>
			{
			case A : CLR_BIT(DDRA, PINID);
    1b64:	aa e3       	ldi	r26, 0x3A	; 58
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	ea e3       	ldi	r30, 0x3A	; 58
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	48 2f       	mov	r20, r24
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 2e       	mov	r0, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_setPinDir+0x166>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	0a 94       	dec	r0
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <DIO_setPinDir+0x162>
    1b86:	80 95       	com	r24
    1b88:	84 23       	and	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	3e c0       	rjmp	.+124    	; 0x1c0a <DIO_setPinDir+0x1ee>
				break;
			case B: CLR_BIT(DDRB, PINID);
    1b8e:	a7 e3       	ldi	r26, 0x37	; 55
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e7 e3       	ldi	r30, 0x37	; 55
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <DIO_setPinDir+0x190>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <DIO_setPinDir+0x18c>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	29 c0       	rjmp	.+82     	; 0x1c0a <DIO_setPinDir+0x1ee>
				break;
			case C: CLR_BIT(DDRC, PINID);
    1bb8:	a4 e3       	ldi	r26, 0x34	; 52
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e4 e3       	ldi	r30, 0x34	; 52
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <DIO_setPinDir+0x1ba>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <DIO_setPinDir+0x1b6>
    1bda:	80 95       	com	r24
    1bdc:	84 23       	and	r24, r20
    1bde:	8c 93       	st	X, r24
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <DIO_setPinDir+0x1ee>
				break;
			case D: CLR_BIT(DDRD, PINID);
    1be2:	a1 e3       	ldi	r26, 0x31	; 49
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e1 e3       	ldi	r30, 0x31	; 49
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <DIO_setPinDir+0x1e4>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <DIO_setPinDir+0x1e0>
    1c04:	80 95       	com	r24
    1c06:	84 23       	and	r24, r20
    1c08:	8c 93       	st	X, r24
	else
	{
		/*do no thing*/
	}

}
    1c0a:	27 96       	adiw	r28, 0x07	; 7
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <DIO_setPinval>:


void DIO_setPinval(u8 PORTID,u8 PINID,u8 pinval)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	27 97       	sbiw	r28, 0x07	; 7
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	6a 83       	std	Y+2, r22	; 0x02
    1c34:	4b 83       	std	Y+3, r20	; 0x03
	if(pinval == HIGH)
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <DIO_setPinval+0x22>
    1c3c:	6f c0       	rjmp	.+222    	; 0x1d1c <DIO_setPinval+0x100>
		{
			switch(PORTID)
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	3f 83       	std	Y+7, r19	; 0x07
    1c46:	2e 83       	std	Y+6, r18	; 0x06
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	49 f1       	breq	.+82     	; 0x1ca4 <DIO_setPinval+0x88>
    1c52:	2e 81       	ldd	r18, Y+6	; 0x06
    1c54:	3f 81       	ldd	r19, Y+7	; 0x07
    1c56:	22 30       	cpi	r18, 0x02	; 2
    1c58:	31 05       	cpc	r19, r1
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <DIO_setPinval+0x4a>
    1c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <DIO_setPinval+0x60>
    1c64:	d2 c0       	rjmp	.+420    	; 0x1e0a <DIO_setPinval+0x1ee>
    1c66:	2e 81       	ldd	r18, Y+6	; 0x06
    1c68:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	71 f1       	breq	.+92     	; 0x1ccc <DIO_setPinval+0xb0>
    1c70:	8e 81       	ldd	r24, Y+6	; 0x06
    1c72:	9f 81       	ldd	r25, Y+7	; 0x07
    1c74:	83 30       	cpi	r24, 0x03	; 3
    1c76:	91 05       	cpc	r25, r1
    1c78:	e9 f1       	breq	.+122    	; 0x1cf4 <DIO_setPinval+0xd8>
    1c7a:	c7 c0       	rjmp	.+398    	; 0x1e0a <DIO_setPinval+0x1ee>
					{
					case A: SET_BIT(PORTA, PINID);
    1c7c:	ab e3       	ldi	r26, 0x3B	; 59
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	eb e3       	ldi	r30, 0x3B	; 59
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_setPinval+0x7e>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <DIO_setPinval+0x7a>
    1c9e:	84 2b       	or	r24, r20
    1ca0:	8c 93       	st	X, r24
    1ca2:	b3 c0       	rjmp	.+358    	; 0x1e0a <DIO_setPinval+0x1ee>
						break;
					case B: SET_BIT(PORTB, PINID);
    1ca4:	a8 e3       	ldi	r26, 0x38	; 56
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e8 e3       	ldi	r30, 0x38	; 56
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 2e       	mov	r0, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <DIO_setPinval+0xa6>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <DIO_setPinval+0xa2>
    1cc6:	84 2b       	or	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	9f c0       	rjmp	.+318    	; 0x1e0a <DIO_setPinval+0x1ee>
						break;
					case C: SET_BIT(PORTC, PINID);
    1ccc:	a5 e3       	ldi	r26, 0x35	; 53
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e5 e3       	ldi	r30, 0x35	; 53
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 2e       	mov	r0, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_setPinval+0xce>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_setPinval+0xca>
    1cee:	84 2b       	or	r24, r20
    1cf0:	8c 93       	st	X, r24
    1cf2:	8b c0       	rjmp	.+278    	; 0x1e0a <DIO_setPinval+0x1ee>
						break;
					case D: SET_BIT(PORTD, PINID);
    1cf4:	a2 e3       	ldi	r26, 0x32	; 50
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e2 e3       	ldi	r30, 0x32	; 50
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	48 2f       	mov	r20, r24
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	02 2e       	mov	r0, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_setPinval+0xf6>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	0a 94       	dec	r0
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_setPinval+0xf2>
    1d16:	84 2b       	or	r24, r20
    1d18:	8c 93       	st	X, r24
    1d1a:	77 c0       	rjmp	.+238    	; 0x1e0a <DIO_setPinval+0x1ee>
						break;
					default:/*do no thing*/
						break;
					}
		}
	else if(pinval == LOW)
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	88 23       	and	r24, r24
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <DIO_setPinval+0x108>
    1d22:	73 c0       	rjmp	.+230    	; 0x1e0a <DIO_setPinval+0x1ee>
		{
			switch(PORTID)
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	3d 83       	std	Y+5, r19	; 0x05
    1d2c:	2c 83       	std	Y+4, r18	; 0x04
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	9d 81       	ldd	r25, Y+5	; 0x05
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	91 05       	cpc	r25, r1
    1d36:	59 f1       	breq	.+86     	; 0x1d8e <DIO_setPinval+0x172>
    1d38:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <DIO_setPinval+0x130>
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f0       	breq	.+26     	; 0x1d64 <DIO_setPinval+0x148>
    1d4a:	5f c0       	rjmp	.+190    	; 0x1e0a <DIO_setPinval+0x1ee>
    1d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d50:	22 30       	cpi	r18, 0x02	; 2
    1d52:	31 05       	cpc	r19, r1
    1d54:	89 f1       	breq	.+98     	; 0x1db8 <DIO_setPinval+0x19c>
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5a:	83 30       	cpi	r24, 0x03	; 3
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <DIO_setPinval+0x146>
    1d60:	40 c0       	rjmp	.+128    	; 0x1de2 <DIO_setPinval+0x1c6>
    1d62:	53 c0       	rjmp	.+166    	; 0x1e0a <DIO_setPinval+0x1ee>
				{
			case A : CLR_BIT(PORTA, PINID);
    1d64:	ab e3       	ldi	r26, 0x3B	; 59
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	eb e3       	ldi	r30, 0x3B	; 59
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_setPinval+0x166>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_setPinval+0x162>
    1d86:	80 95       	com	r24
    1d88:	84 23       	and	r24, r20
    1d8a:	8c 93       	st	X, r24
    1d8c:	3e c0       	rjmp	.+124    	; 0x1e0a <DIO_setPinval+0x1ee>
				break;
			case B: CLR_BIT(PORTB, PINID);
    1d8e:	a8 e3       	ldi	r26, 0x38	; 56
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e8 e3       	ldi	r30, 0x38	; 56
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_setPinval+0x190>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_setPinval+0x18c>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	29 c0       	rjmp	.+82     	; 0x1e0a <DIO_setPinval+0x1ee>
				break;
			case C: CLR_BIT(PORTC, PINID);
    1db8:	a5 e3       	ldi	r26, 0x35	; 53
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e5 e3       	ldi	r30, 0x35	; 53
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_setPinval+0x1ba>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_setPinval+0x1b6>
    1dda:	80 95       	com	r24
    1ddc:	84 23       	and	r24, r20
    1dde:	8c 93       	st	X, r24
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <DIO_setPinval+0x1ee>
				break;
			case D: CLR_BIT(PORTD, PINID);
    1de2:	a2 e3       	ldi	r26, 0x32	; 50
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e2 e3       	ldi	r30, 0x32	; 50
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_setPinval+0x1e4>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_setPinval+0x1e0>
    1e04:	80 95       	com	r24
    1e06:	84 23       	and	r24, r20
    1e08:	8c 93       	st	X, r24
		}
	else
	{
		/*do no thing*/
	}
}
    1e0a:	27 96       	adiw	r28, 0x07	; 7
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <DIO_getPinval>:


u8 DIO_getPinval(u8 PORTID,u8 PINID)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <DIO_getPinval+0x6>
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <DIO_getPinval+0x8>
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pinval = 0;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
	switch(PORTID)
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	3d 83       	std	Y+5, r19	; 0x05
    1e38:	2c 83       	std	Y+4, r18	; 0x04
    1e3a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e3c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e3e:	41 30       	cpi	r20, 0x01	; 1
    1e40:	51 05       	cpc	r21, r1
    1e42:	41 f1       	breq	.+80     	; 0x1e94 <DIO_getPinval+0x78>
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	34 f4       	brge	.+12     	; 0x1e5a <DIO_getPinval+0x3e>
    1e4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e50:	3d 81       	ldd	r19, Y+5	; 0x05
    1e52:	21 15       	cp	r18, r1
    1e54:	31 05       	cpc	r19, r1
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <DIO_getPinval+0x54>
    1e58:	52 c0       	rjmp	.+164    	; 0x1efe <DIO_getPinval+0xe2>
    1e5a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e5c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e5e:	42 30       	cpi	r20, 0x02	; 2
    1e60:	51 05       	cpc	r21, r1
    1e62:	51 f1       	breq	.+84     	; 0x1eb8 <DIO_getPinval+0x9c>
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	b9 f1       	breq	.+110    	; 0x1edc <DIO_getPinval+0xc0>
    1e6e:	47 c0       	rjmp	.+142    	; 0x1efe <DIO_getPinval+0xe2>
	{
	case A: pinval=GET_BIT(PINA, PINID);
    1e70:	e9 e3       	ldi	r30, 0x39	; 57
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a9 01       	movw	r20, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <DIO_getPinval+0x6c>
    1e84:	55 95       	asr	r21
    1e86:	47 95       	ror	r20
    1e88:	8a 95       	dec	r24
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <DIO_getPinval+0x68>
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	81 70       	andi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	35 c0       	rjmp	.+106    	; 0x1efe <DIO_getPinval+0xe2>
		break;
	case B: pinval=GET_BIT(PINB, PINID);
    1e94:	e6 e3       	ldi	r30, 0x36	; 54
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a9 01       	movw	r20, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_getPinval+0x90>
    1ea8:	55 95       	asr	r21
    1eaa:	47 95       	ror	r20
    1eac:	8a 95       	dec	r24
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_getPinval+0x8c>
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	81 70       	andi	r24, 0x01	; 1
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	23 c0       	rjmp	.+70     	; 0x1efe <DIO_getPinval+0xe2>
		break;
	case C: pinval=GET_BIT(PINC, PINID);
    1eb8:	e3 e3       	ldi	r30, 0x33	; 51
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_getPinval+0xb4>
    1ecc:	55 95       	asr	r21
    1ece:	47 95       	ror	r20
    1ed0:	8a 95       	dec	r24
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_getPinval+0xb0>
    1ed4:	ca 01       	movw	r24, r20
    1ed6:	81 70       	andi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	11 c0       	rjmp	.+34     	; 0x1efe <DIO_getPinval+0xe2>
		break;
	case D: pinval=GET_BIT(PIND, PINID);
    1edc:	e0 e3       	ldi	r30, 0x30	; 48
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a9 01       	movw	r20, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_getPinval+0xd8>
    1ef0:	55 95       	asr	r21
    1ef2:	47 95       	ror	r20
    1ef4:	8a 95       	dec	r24
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_getPinval+0xd4>
    1ef8:	ca 01       	movw	r24, r20
    1efa:	81 70       	andi	r24, 0x01	; 1
    1efc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:/*do no thing*/
		break;
	}
	return pinval;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <DIO_pullup_Port>:


/*******************activate pullup resistor  **********************/
void DIO_pullup_Port(u8 PORTID)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPortDir(PORTID, IN_PORT);
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	0e 94 4a 0c 	call	0x1894	; 0x1894 <DIO_setPortDir>
	DIO_setPortval(PORTID, PORT_HIGH);
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	6f ef       	ldi	r22, 0xFF	; 255
    1f28:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_setPortval>
}
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <DIO_pullup_PIN>:
void DIO_pullup_PIN(u8 PORTID,u8 PINID)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <DIO_pullup_PIN+0x6>
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinDir(PORTID,PINID, IN);
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	6a 81       	ldd	r22, Y+2	; 0x02
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	DIO_setPinval(PORTID,PINID, HIGH);
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <DIO_SetHighrNibbles>:


/****************Set nibbles ***************/
void DIO_SetHighrNibbles(u8 Data)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	PORTA=(PORTA & 0x0F)|(Data & 0xF0);
    1f6c:	ab e3       	ldi	r26, 0x3B	; 59
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	eb e3       	ldi	r30, 0x3B	; 59
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	98 2f       	mov	r25, r24
    1f78:	9f 70       	andi	r25, 0x0F	; 15
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	80 7f       	andi	r24, 0xF0	; 240
    1f7e:	89 2b       	or	r24, r25
    1f80:	8c 93       	st	X, r24
}
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <DIO_SetLowerNibbles>:


void DIO_SetLowerNibbles(u8 Data)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	89 83       	std	Y+1, r24	; 0x01
	PORTA=(PORTA & 0x0F)|(Data << 4);
    1f96:	ab e3       	ldi	r26, 0x3B	; 59
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	eb e3       	ldi	r30, 0x3B	; 59
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	2f 70       	andi	r18, 0x0F	; 15
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	82 95       	swap	r24
    1fac:	92 95       	swap	r25
    1fae:	90 7f       	andi	r25, 0xF0	; 240
    1fb0:	98 27       	eor	r25, r24
    1fb2:	80 7f       	andi	r24, 0xF0	; 240
    1fb4:	98 27       	eor	r25, r24
    1fb6:	82 2b       	or	r24, r18
    1fb8:	8c 93       	st	X, r24
}
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <ADC_init>:

#include "ADC_interface.h"


void ADC_init(u8 type,u8 VREF,u8 prescale)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <ADC_init+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <ADC_init+0x8>
    1fca:	0f 92       	push	r0
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	6a 83       	std	Y+2, r22	; 0x02
    1fd4:	4b 83       	std	Y+3, r20	; 0x03
	
	SET_BIT(ADCSRA,ADEN);
    1fd6:	a6 e2       	ldi	r26, 0x26	; 38
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e6 e2       	ldi	r30, 0x26	; 38
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 68       	ori	r24, 0x80	; 128
    1fe2:	8c 93       	st	X, r24

	/**************SET PINS OF MSB or LSB *********/
	if(type == MSB)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	41 f4       	brne	.+16     	; 0x1ffa <ADC_init+0x38>
	{
		SET_BIT(ADMUX,ADLAR);
    1fea:	a7 e2       	ldi	r26, 0x27	; 39
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e7 e2       	ldi	r30, 0x27	; 39
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 62       	ori	r24, 0x20	; 32
    1ff6:	8c 93       	st	X, r24
    1ff8:	0a c0       	rjmp	.+20     	; 0x200e <ADC_init+0x4c>
	}
	else if (type == LSB)
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	88 23       	and	r24, r24
    1ffe:	39 f4       	brne	.+14     	; 0x200e <ADC_init+0x4c>
	{
		CLR_BIT(ADMUX,ADLAR);
    2000:	a7 e2       	ldi	r26, 0x27	; 39
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e7 e2       	ldi	r30, 0x27	; 39
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 7d       	andi	r24, 0xDF	; 223
    200c:	8c 93       	st	X, r24
	}

	/**************VREF choose *********/
	if(VREF == internal)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	88 23       	and	r24, r24
    2012:	79 f4       	brne	.+30     	; 0x2032 <ADC_init+0x70>
	{
		CLR_BIT(ADMUX,REFS1);
    2014:	a7 e2       	ldi	r26, 0x27	; 39
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e7 e2       	ldi	r30, 0x27	; 39
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	8f 77       	andi	r24, 0x7F	; 127
    2020:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS0);
    2022:	a7 e2       	ldi	r26, 0x27	; 39
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e7 e2       	ldi	r30, 0x27	; 39
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	8f 7b       	andi	r24, 0xBF	; 191
    202e:	8c 93       	st	X, r24
    2030:	11 c0       	rjmp	.+34     	; 0x2054 <ADC_init+0x92>
	}
	else if (type == external)
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	71 f4       	brne	.+28     	; 0x2054 <ADC_init+0x92>
	{
		SET_BIT(ADMUX,REFS1);
    2038:	a7 e2       	ldi	r26, 0x27	; 39
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e7 e2       	ldi	r30, 0x27	; 39
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	80 68       	ori	r24, 0x80	; 128
    2044:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
    2046:	a7 e2       	ldi	r26, 0x27	; 39
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e7 e2       	ldi	r30, 0x27	; 39
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 64       	ori	r24, 0x40	; 64
    2052:	8c 93       	st	X, r24

	}
	/**************prescale value **************/
	switch(prescale)
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	3d 83       	std	Y+5, r19	; 0x05
    205c:	2c 83       	std	Y+4, r18	; 0x04
    205e:	8c 81       	ldd	r24, Y+4	; 0x04
    2060:	9d 81       	ldd	r25, Y+5	; 0x05
    2062:	80 31       	cpi	r24, 0x10	; 16
    2064:	91 05       	cpc	r25, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <ADC_init+0xa8>
    2068:	6b c0       	rjmp	.+214    	; 0x2140 <ADC_init+0x17e>
    206a:	2c 81       	ldd	r18, Y+4	; 0x04
    206c:	3d 81       	ldd	r19, Y+5	; 0x05
    206e:	21 31       	cpi	r18, 0x11	; 17
    2070:	31 05       	cpc	r19, r1
    2072:	8c f4       	brge	.+34     	; 0x2096 <ADC_init+0xd4>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	84 30       	cpi	r24, 0x04	; 4
    207a:	91 05       	cpc	r25, r1
    207c:	a9 f1       	breq	.+106    	; 0x20e8 <ADC_init+0x126>
    207e:	2c 81       	ldd	r18, Y+4	; 0x04
    2080:	3d 81       	ldd	r19, Y+5	; 0x05
    2082:	28 30       	cpi	r18, 0x08	; 8
    2084:	31 05       	cpc	r19, r1
    2086:	09 f4       	brne	.+2      	; 0x208a <ADC_init+0xc8>
    2088:	45 c0       	rjmp	.+138    	; 0x2114 <ADC_init+0x152>
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	91 05       	cpc	r25, r1
    2092:	a1 f0       	breq	.+40     	; 0x20bc <ADC_init+0xfa>
    2094:	ac c0       	rjmp	.+344    	; 0x21ee <ADC_init+0x22c>
    2096:	2c 81       	ldd	r18, Y+4	; 0x04
    2098:	3d 81       	ldd	r19, Y+5	; 0x05
    209a:	20 34       	cpi	r18, 0x40	; 64
    209c:	31 05       	cpc	r19, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <ADC_init+0xe0>
    20a0:	7b c0       	rjmp	.+246    	; 0x2198 <ADC_init+0x1d6>
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	80 38       	cpi	r24, 0x80	; 128
    20a8:	91 05       	cpc	r25, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <ADC_init+0xec>
    20ac:	8b c0       	rjmp	.+278    	; 0x21c4 <ADC_init+0x202>
    20ae:	2c 81       	ldd	r18, Y+4	; 0x04
    20b0:	3d 81       	ldd	r19, Y+5	; 0x05
    20b2:	20 32       	cpi	r18, 0x20	; 32
    20b4:	31 05       	cpc	r19, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <ADC_init+0xf8>
    20b8:	59 c0       	rjmp	.+178    	; 0x216c <ADC_init+0x1aa>
    20ba:	99 c0       	rjmp	.+306    	; 0x21ee <ADC_init+0x22c>
	{
		case 2:	CLR_BIT(ADCSRA,ADPS0);
    20bc:	a6 e2       	ldi	r26, 0x26	; 38
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e6 e2       	ldi	r30, 0x26	; 38
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	8e 7f       	andi	r24, 0xFE	; 254
    20c8:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    20ca:	a6 e2       	ldi	r26, 0x26	; 38
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e6 e2       	ldi	r30, 0x26	; 38
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	8d 7f       	andi	r24, 0xFD	; 253
    20d6:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);
    20d8:	a6 e2       	ldi	r26, 0x26	; 38
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e6 e2       	ldi	r30, 0x26	; 38
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	8b 7f       	andi	r24, 0xFB	; 251
    20e4:	8c 93       	st	X, r24
    20e6:	83 c0       	rjmp	.+262    	; 0x21ee <ADC_init+0x22c>
		break;
		case 4: CLR_BIT(ADCSRA,ADPS0);
    20e8:	a6 e2       	ldi	r26, 0x26	; 38
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e6 e2       	ldi	r30, 0x26	; 38
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8e 7f       	andi	r24, 0xFE	; 254
    20f4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    20f6:	a6 e2       	ldi	r26, 0x26	; 38
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e6 e2       	ldi	r30, 0x26	; 38
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	82 60       	ori	r24, 0x02	; 2
    2102:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);
    2104:	a6 e2       	ldi	r26, 0x26	; 38
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e6 e2       	ldi	r30, 0x26	; 38
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	8b 7f       	andi	r24, 0xFB	; 251
    2110:	8c 93       	st	X, r24
    2112:	6d c0       	rjmp	.+218    	; 0x21ee <ADC_init+0x22c>
		break;
		case 8: SET_BIT(ADCSRA,ADPS0);
    2114:	a6 e2       	ldi	r26, 0x26	; 38
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e6 e2       	ldi	r30, 0x26	; 38
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    2122:	a6 e2       	ldi	r26, 0x26	; 38
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e6 e2       	ldi	r30, 0x26	; 38
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	82 60       	ori	r24, 0x02	; 2
    212e:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);
    2130:	a6 e2       	ldi	r26, 0x26	; 38
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e6 e2       	ldi	r30, 0x26	; 38
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8b 7f       	andi	r24, 0xFB	; 251
    213c:	8c 93       	st	X, r24
    213e:	57 c0       	rjmp	.+174    	; 0x21ee <ADC_init+0x22c>
		break;
		case 16: CLR_BIT(ADCSRA,ADPS0);
    2140:	a6 e2       	ldi	r26, 0x26	; 38
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e6 e2       	ldi	r30, 0x26	; 38
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8e 7f       	andi	r24, 0xFE	; 254
    214c:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    214e:	a6 e2       	ldi	r26, 0x26	; 38
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e2       	ldi	r30, 0x26	; 38
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8d 7f       	andi	r24, 0xFD	; 253
    215a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    215c:	a6 e2       	ldi	r26, 0x26	; 38
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e6 e2       	ldi	r30, 0x26	; 38
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	84 60       	ori	r24, 0x04	; 4
    2168:	8c 93       	st	X, r24
    216a:	41 c0       	rjmp	.+130    	; 0x21ee <ADC_init+0x22c>
		break;
		case 32: SET_BIT(ADCSRA,ADPS0);
    216c:	a6 e2       	ldi	r26, 0x26	; 38
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e6 e2       	ldi	r30, 0x26	; 38
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	81 60       	ori	r24, 0x01	; 1
    2178:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    217a:	a6 e2       	ldi	r26, 0x26	; 38
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e6 e2       	ldi	r30, 0x26	; 38
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	8d 7f       	andi	r24, 0xFD	; 253
    2186:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    2188:	a6 e2       	ldi	r26, 0x26	; 38
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e6 e2       	ldi	r30, 0x26	; 38
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	84 60       	ori	r24, 0x04	; 4
    2194:	8c 93       	st	X, r24
    2196:	2b c0       	rjmp	.+86     	; 0x21ee <ADC_init+0x22c>
		break;
		case 64: CLR_BIT(ADCSRA,ADPS0);
    2198:	a6 e2       	ldi	r26, 0x26	; 38
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e6 e2       	ldi	r30, 0x26	; 38
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8e 7f       	andi	r24, 0xFE	; 254
    21a4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    21a6:	a6 e2       	ldi	r26, 0x26	; 38
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e6 e2       	ldi	r30, 0x26	; 38
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	82 60       	ori	r24, 0x02	; 2
    21b2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    21b4:	a6 e2       	ldi	r26, 0x26	; 38
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e6 e2       	ldi	r30, 0x26	; 38
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	84 60       	ori	r24, 0x04	; 4
    21c0:	8c 93       	st	X, r24
    21c2:	15 c0       	rjmp	.+42     	; 0x21ee <ADC_init+0x22c>
		break;
		case 128: SET_BIT(ADCSRA,ADPS0);
    21c4:	a6 e2       	ldi	r26, 0x26	; 38
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e6 e2       	ldi	r30, 0x26	; 38
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    21d2:	a6 e2       	ldi	r26, 0x26	; 38
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e6 e2       	ldi	r30, 0x26	; 38
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	82 60       	ori	r24, 0x02	; 2
    21de:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    21e0:	a6 e2       	ldi	r26, 0x26	; 38
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e6 e2       	ldi	r30, 0x26	; 38
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	84 60       	ori	r24, 0x04	; 4
    21ec:	8c 93       	st	X, r24
		break;
		default: // do no thing;
		break;
	}
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <ADC_ReadChannel>:


u16 ADC_ReadChannel(u8 Channel)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <ADC_ReadChannel+0x6>
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	8b 83       	std	Y+3, r24	; 0x03

	/**********************channel******************/
	Channel &= 0x07;
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	87 70       	andi	r24, 0x07	; 7
    2210:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX &=0xE0 ;
    2212:	a7 e2       	ldi	r26, 0x27	; 39
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e7 e2       	ldi	r30, 0x27	; 39
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	80 7e       	andi	r24, 0xE0	; 224
    221e:	8c 93       	st	X, r24
	ADMUX = ADMUX | Channel;
    2220:	a7 e2       	ldi	r26, 0x27	; 39
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e7 e2       	ldi	r30, 0x27	; 39
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	90 81       	ld	r25, Z
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	89 2b       	or	r24, r25
    222e:	8c 93       	st	X, r24
	u16 ADC_value=0;
    2230:	1a 82       	std	Y+2, r1	; 0x02
    2232:	19 82       	std	Y+1, r1	; 0x01
	ADC_value |= ADCL ;
    2234:	e4 e2       	ldi	r30, 0x24	; 36
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	82 2b       	or	r24, r18
    2244:	93 2b       	or	r25, r19
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
	ADC_value |= (ADCH<<8);
    224a:	e5 e2       	ldi	r30, 0x25	; 37
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	98 2f       	mov	r25, r24
    2256:	88 27       	eor	r24, r24
    2258:	9c 01       	movw	r18, r24
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	82 2b       	or	r24, r18
    2260:	93 2b       	or	r25, r19
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,ADSC);
    2266:	a6 e2       	ldi	r26, 0x26	; 38
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e6 e2       	ldi	r30, 0x26	; 38
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	80 64       	ori	r24, 0x40	; 64
    2272:	8c 93       	st	X, r24
	while(!GET_BIT(ADCSRA,ADIF));
    2274:	e6 e2       	ldi	r30, 0x26	; 38
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	82 95       	swap	r24
    227c:	8f 70       	andi	r24, 0x0F	; 15
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	81 70       	andi	r24, 0x01	; 1
    2284:	90 70       	andi	r25, 0x00	; 0
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	a9 f3       	breq	.-22     	; 0x2274 <ADC_ReadChannel+0x76>
	SET_BIT(ADCSRA,ADIF);
    228a:	a6 e2       	ldi	r26, 0x26	; 38
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e6 e2       	ldi	r30, 0x26	; 38
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	80 61       	ori	r24, 0x10	; 16
    2296:	8c 93       	st	X, r24
	return ADC_value;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <LM35_init>:

#include "LM35.h"

void LM35_init(u8 PORTID,u8 PINID)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <LM35_init+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	6a 83       	std	Y+2, r22	; 0x02
	ADC_init(MODE, VREF, prescale);
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	61 e0       	ldi	r22, 0x01	; 1
    22ba:	40 e4       	ldi	r20, 0x40	; 64
    22bc:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <ADC_init>
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <LM35_Read>:

u8 LM35_Read(u8 Channel)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <LM35_Read+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <LM35_Read+0x8>
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	8d 83       	std	Y+5, r24	; 0x05
	float temp = 0 ;
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	ab 83       	std	Y+3, r26	; 0x03
    22e8:	bc 83       	std	Y+4, r27	; 0x04
	temp = (float)ADC_ReadChannel(Channel);
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	0e 94 ff 10 	call	0x21fe	; 0x21fe <ADC_ReadChannel>
    22f0:	cc 01       	movw	r24, r24
    22f2:	a0 e0       	ldi	r26, 0x00	; 0
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	ab 83       	std	Y+3, r26	; 0x03
    2308:	bc 83       	std	Y+4, r27	; 0x04
	temp = (float)((5*temp)/1024)*100;
    230a:	69 81       	ldd	r22, Y+1	; 0x01
    230c:	7a 81       	ldd	r23, Y+2	; 0x02
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 ea       	ldi	r20, 0xA0	; 160
    2318:	50 e4       	ldi	r21, 0x40	; 64
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	48 ec       	ldi	r20, 0xC8	; 200
    2340:	52 e4       	ldi	r21, 0x42	; 66
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	ab 83       	std	Y+3, r26	; 0x03
    2350:	bc 83       	std	Y+4, r27	; 0x04
	return temp;
    2352:	69 81       	ldd	r22, Y+1	; 0x01
    2354:	7a 81       	ldd	r23, Y+2	; 0x02
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <LED_init>:
#include "LED_interface.h"


/***********setPinDir to output**********/
void LED_init(u8 PORTID,u8 PINID)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <LED_init+0x6>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinDir(PORTID, PINID,OUT);
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	6a 81       	ldd	r22, Y+2	; 0x02
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <LED_on>:


/***********setPinval to high**********/
void LED_on(u8 PORTID,u8 PINID)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <LED_on+0x6>
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinval(PORTID,PINID,HIGH);
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	6a 81       	ldd	r22, Y+2	; 0x02
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <LED_off>:


/***********setPinval to low**********/
void LED_off(u8 PORTID,u8 PINID)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <LED_off+0x6>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinval(PORTID,PINID,LOW);
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	6a 81       	ldd	r22, Y+2	; 0x02
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <LED_toggle>:


/***************toggle led between high and low*****************/
void LED_toggle(u8 PORTID,u8 PINID)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <LED_toggle+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	6a 83       	std	Y+2, r22	; 0x02
	if(DIO_getPinval(PORTID,PINID)==HIGH)
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	6a 81       	ldd	r22, Y+2	; 0x02
    23ea:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_getPinval>
    23ee:	81 30       	cpi	r24, 0x01	; 1
    23f0:	29 f4       	brne	.+10     	; 0x23fc <LED_toggle+0x24>
	{
		LED_off(PORTID, PINID);
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	6a 81       	ldd	r22, Y+2	; 0x02
    23f6:	0e 94 db 11 	call	0x23b6	; 0x23b6 <LED_off>
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <LED_toggle+0x38>
	}
	else if(DIO_getPinval(PORTID,PINID)==LOW)
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2400:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_getPinval>
    2404:	88 23       	and	r24, r24
    2406:	21 f4       	brne	.+8      	; 0x2410 <LED_toggle+0x38>
	{
		LED_on(PORTID, PINID);
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	6a 81       	ldd	r22, Y+2	; 0x02
    240c:	0e 94 ca 11 	call	0x2394	; 0x2394 <LED_on>
	}
	else
	{
		/*do nothing*/
	}
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <HEAT_INIT>:

#include "../../HAL/Heater/HEATER_ELEMENT.h"
#include "../../HAL/EEPROM/EEPROM_interface.h"
void HEAT_INIT(void)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDir(HEAT_PORT,HEAT_PIN,OUT);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	62 e0       	ldi	r22, 0x02	; 2
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
}
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <HEAT_START>:
void HEAT_START(void)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinval(HEAT_PORT,HEAT_PIN,HIGH);
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <HEAT_STOP>:
void HEAT_STOP(void)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinval(HEAT_PORT,HEAT_PIN,LOW);
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <COOL_INIT>:

void COOL_INIT(void)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDir(COOL_PORT,COOL_PIN,OUT);
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	63 e0       	ldi	r22, 0x03	; 3
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <COOL_START>:
void COOL_START(void)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinval(COOL_PORT,COOL_PIN,HIGH);
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	63 e0       	ldi	r22, 0x03	; 3
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <COOL_STOP>:
void COOL_STOP(void)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinval(COOL_PORT,COOL_PIN,LOW);
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	63 e0       	ldi	r22, 0x03	; 3
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <State_led_INIT>:

void State_led_INIT(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDir(STATE_LED_PORT,STATE_LED_PIN,OUT);
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	64 e0       	ldi	r22, 0x04	; 4
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <State_led_start>:
void State_led_start(void)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinval(STATE_LED_PORT,STATE_LED_PIN,HIGH);
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	64 e0       	ldi	r22, 0x04	; 4
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <State_led_stop>:
void State_led_stop(void)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinval(STATE_LED_PORT,STATE_LED_PIN,LOW);
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	64 e0       	ldi	r22, 0x04	; 4
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <State_led_tog>:

void State_led_tog(void)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	2e 97       	sbiw	r28, 0x0e	; 14
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
	DIO_setPinval(STATE_LED_PORT,STATE_LED_PIN,HIGH);
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	64 e0       	ldi	r22, 0x04	; 4
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	aa e7       	ldi	r26, 0x7A	; 122
    2516:	b4 e4       	ldi	r27, 0x44	; 68
    2518:	8b 87       	std	Y+11, r24	; 0x0b
    251a:	9c 87       	std	Y+12, r25	; 0x0c
    251c:	ad 87       	std	Y+13, r26	; 0x0d
    251e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6b 85       	ldd	r22, Y+11	; 0x0b
    2522:	7c 85       	ldd	r23, Y+12	; 0x0c
    2524:	8d 85       	ldd	r24, Y+13	; 0x0d
    2526:	9e 85       	ldd	r25, Y+14	; 0x0e
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a e7       	ldi	r20, 0x7A	; 122
    252e:	53 e4       	ldi	r21, 0x43	; 67
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8f 83       	std	Y+7, r24	; 0x07
    253a:	98 87       	std	Y+8, r25	; 0x08
    253c:	a9 87       	std	Y+9, r26	; 0x09
    253e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2540:	6f 81       	ldd	r22, Y+7	; 0x07
    2542:	78 85       	ldd	r23, Y+8	; 0x08
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <State_led_tog+0x70>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <State_led_tog+0xee>
	else if (__tmp > 65535)
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <State_led_tog+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6b 85       	ldd	r22, Y+11	; 0x0b
    257c:	7c 85       	ldd	r23, Y+12	; 0x0c
    257e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2580:	9e 85       	ldd	r25, Y+14	; 0x0e
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <State_led_tog+0xd0>
    25a4:	89 e1       	ldi	r24, 0x19	; 25
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <State_led_tog+0xbe>
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <State_led_tog+0xb2>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <State_led_tog+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <State_led_tog+0xfa>
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_setPinval(STATE_LED_PORT,STATE_LED_PIN,LOW);
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	64 e0       	ldi	r22, 0x04	; 4
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
}
    25fe:	2e 96       	adiw	r28, 0x0e	; 14
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <getState>:


u8 getState(void)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
	if (DIO_getPinval(HEAT_PORT,HEAT_PIN)==HIGH)
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_getPinval>
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	19 f4       	brne	.+6      	; 0x262c <getState+0x1c>
	{
		return HEAT_ON;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	0a c0       	rjmp	.+20     	; 0x2640 <getState+0x30>
	}
	else if (DIO_getPinval(COOL_PORT,COOL_PIN)==HIGH)
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	63 e0       	ldi	r22, 0x03	; 3
    2630:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_getPinval>
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	19 f4       	brne	.+6      	; 0x263e <getState+0x2e>
	{
		return COOL_ON;
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	01 c0       	rjmp	.+2      	; 0x2640 <getState+0x30>
	}
	else
	{
		return BOTH_OFF;
    263e:	19 82       	std	Y+1, r1	; 0x01
    2640:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <SEND_TEMP>:

void SEND_TEMP(u8 val,u8 add)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <SEND_TEMP+0x6>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	6a 83       	std	Y+2, r22	; 0x02
	EEPROM_init();
    2658:	0e 94 39 13 	call	0x2672	; 0x2672 <EEPROM_init>
	EEPROM_WRITE(add ,val);
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	69 81       	ldd	r22, Y+1	; 0x01
    2664:	0e 94 42 13 	call	0x2684	; 0x2684 <EEPROM_WRITE>
}
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <EEPROM_init>:

#include "EEPROM_interface.h"

void EEPROM_init(void)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
	TWI_Init();
    267a:	0e 94 b4 09 	call	0x1368	; 0x1368 <TWI_Init>
}
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <EEPROM_WRITE>:

void EEPROM_WRITE(u16 Address ,u8 Data)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	00 d0       	rcall	.+0      	; 0x268a <EEPROM_WRITE+0x6>
    268a:	0f 92       	push	r0
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	6b 83       	std	Y+3, r22	; 0x03
	 TWI_Start();
    2696:	0e 94 ca 09 	call	0x1394	; 0x1394 <TWI_Start>


	    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	    TWI_Write((unsigned char)(0xA0 | ((Address & 0x0700)>>7)));
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	80 70       	andi	r24, 0x00	; 0
    26a0:	97 70       	andi	r25, 0x07	; 7
    26a2:	88 0f       	add	r24, r24
    26a4:	89 2f       	mov	r24, r25
    26a6:	88 1f       	adc	r24, r24
    26a8:	99 0b       	sbc	r25, r25
    26aa:	91 95       	neg	r25
    26ac:	80 6a       	ori	r24, 0xA0	; 160
    26ae:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_Write>


	    //send the required location address
	    TWI_Write((unsigned char)(Address));
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_Write>


	    //write byte to eeprom
	    TWI_Write(Data);
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_Write>


	    TWI_Stop();
    26be:	0e 94 da 09 	call	0x13b4	; 0x13b4 <TWI_Stop>


}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <EEPROM_READ>:

void EEPROM_READ(u16 Address ,u8 *Data)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <EEPROM_READ+0x6>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <EEPROM_READ+0x8>
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	9a 83       	std	Y+2, r25	; 0x02
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	7c 83       	std	Y+4, r23	; 0x04
    26e0:	6b 83       	std	Y+3, r22	; 0x03
	 TWI_Start();
    26e2:	0e 94 ca 09 	call	0x1394	; 0x1394 <TWI_Start>


	    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	    TWI_Write((unsigned char)((0xA0) | ((Address & 0x0700)>>7)));
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	80 70       	andi	r24, 0x00	; 0
    26ec:	97 70       	andi	r25, 0x07	; 7
    26ee:	88 0f       	add	r24, r24
    26f0:	89 2f       	mov	r24, r25
    26f2:	88 1f       	adc	r24, r24
    26f4:	99 0b       	sbc	r25, r25
    26f6:	91 95       	neg	r25
    26f8:	80 6a       	ori	r24, 0xA0	; 160
    26fa:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_Write>


	    //send the required location address
	    TWI_Write((unsigned char)(Address));
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_Write>


	    //send a repeated start
	    TWI_Start();
    2704:	0e 94 ca 09 	call	0x1394	; 0x1394 <TWI_Start>


	    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
	    TWI_Write((unsigned char)((0xA0) | ((Address & 0x0700)>>7) | 1));
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	80 70       	andi	r24, 0x00	; 0
    270e:	97 70       	andi	r25, 0x07	; 7
    2710:	88 0f       	add	r24, r24
    2712:	89 2f       	mov	r24, r25
    2714:	88 1f       	adc	r24, r24
    2716:	99 0b       	sbc	r25, r25
    2718:	91 95       	neg	r25
    271a:	81 6a       	ori	r24, 0xA1	; 161
    271c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWI_Write>


	    *Data = TWI_Read_With_NACK();
    2720:	0e 94 0f 0a 	call	0x141e	; 0x141e <TWI_Read_With_NACK>
    2724:	eb 81       	ldd	r30, Y+3	; 0x03
    2726:	fc 81       	ldd	r31, Y+4	; 0x04
    2728:	80 83       	st	Z, r24


	    TWI_Stop();
    272a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <TWI_Stop>
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <PB_init>:
#include "Button_interface.h"


/**************set pin to be output for PushButton*************/
void PB_init(u8 PORTID,u8 PINID,u8 mode)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	00 d0       	rcall	.+0      	; 0x2742 <PB_init+0x6>
    2742:	0f 92       	push	r0
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	6a 83       	std	Y+2, r22	; 0x02
    274c:	4b 83       	std	Y+3, r20	; 0x03
	if (mode == PULL_UP)
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	88 23       	and	r24, r24
    2752:	59 f4       	brne	.+22     	; 0x276a <PB_init+0x2e>
	{
		DIO_setPinDir(PORTID, PINID, IN);
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	6a 81       	ldd	r22, Y+2	; 0x02
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
		DIO_setPinval(PORTID,PINID,HIGH);
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	6a 81       	ldd	r22, Y+2	; 0x02
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
    2768:	08 c0       	rjmp	.+16     	; 0x277a <PB_init+0x3e>
	}
	else if (mode == PULL_DOWN)
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	81 30       	cpi	r24, 0x01	; 1
    276e:	29 f4       	brne	.+10     	; 0x277a <PB_init+0x3e>
	{
		DIO_setPinDir(PORTID, PINID, IN);
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	6a 81       	ldd	r22, Y+2	; 0x02
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	else
	{
		/*do nothing*/
	}
	
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <PB_state>:


/**************check value on pin***************/
u8 PB_state(u8 PORTID,u8 PINID)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <PB_state+0x6>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_getPinval(PORTID,PINID);
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	6a 81       	ldd	r22, Y+2	; 0x02
    2798:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_getPinval>
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <Seven_segment_enable>:
#include "Seven_Segment.h"


/*******************disable 7_segment*********************/
void Seven_segment_enable(u8 Segment)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	0f 92       	push	r0
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	89 83       	std	Y+1, r24	; 0x01
	if (Segment == TENS)
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	59 f4       	brne	.+22     	; 0x27ce <Seven_segment_enable+0x28>
	{
		DIO_setPinDir(B, PIN3, OUT);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	63 e0       	ldi	r22, 0x03	; 3
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
		DIO_setPinval(B, PIN3, HIGH);
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	63 e0       	ldi	r22, 0x03	; 3
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
    27cc:	0d c0       	rjmp	.+26     	; 0x27e8 <Seven_segment_enable+0x42>
	}
	else if (Segment == UNIT)
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	88 23       	and	r24, r24
    27d2:	51 f4       	brne	.+20     	; 0x27e8 <Seven_segment_enable+0x42>
	{
		DIO_setPinDir(B, PIN1, OUT);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
		DIO_setPinval(B, PIN1, HIGH);
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	41 e0       	ldi	r20, 0x01	; 1
    27e4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
	}
}
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <Seven_segment_disable>:


/*******************enable 7_segment*********************/
void Seven_segment_disable(u8 Segment)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	0f 92       	push	r0
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	89 83       	std	Y+1, r24	; 0x01
	if (Segment == TENS)
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	81 30       	cpi	r24, 0x01	; 1
    2800:	59 f4       	brne	.+22     	; 0x2818 <Seven_segment_disable+0x28>
	{
		DIO_setPinDir(B, PIN3, OUT);
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	63 e0       	ldi	r22, 0x03	; 3
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
		DIO_setPinval(B, PIN3, LOW);
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	63 e0       	ldi	r22, 0x03	; 3
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
    2816:	0d c0       	rjmp	.+26     	; 0x2832 <Seven_segment_disable+0x42>
	}
	else if (Segment == UNIT)
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	88 23       	and	r24, r24
    281c:	51 f4       	brne	.+20     	; 0x2832 <Seven_segment_disable+0x42>
	{
		DIO_setPinDir(B, PIN1, OUT);
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
		DIO_setPinval(B, PIN1, LOW);
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DIO_setPinval>
	}
}
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <Seven_segment_init>:
/**************active 7_segment on which pins *****************/
void Seven_segment_init(u8 PORTID,u8 type)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <Seven_segment_init+0x6>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	6a 83       	std	Y+2, r22	; 0x02
  if(type == MSB)
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	81 30       	cpi	r24, 0x01	; 1
    284c:	a9 f4       	brne	.+42     	; 0x2878 <Seven_segment_init+0x3e>
  {
	  DIO_setPinDir(PORTID, PIN4, OUT);
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	64 e0       	ldi	r22, 0x04	; 4
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN5, OUT);
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	65 e0       	ldi	r22, 0x05	; 5
    285c:	41 e0       	ldi	r20, 0x01	; 1
    285e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN6, OUT);
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	66 e0       	ldi	r22, 0x06	; 6
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN7, OUT);
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	67 e0       	ldi	r22, 0x07	; 7
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
    2876:	17 c0       	rjmp	.+46     	; 0x28a6 <Seven_segment_init+0x6c>
  }
  else if (type == LSB)
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	88 23       	and	r24, r24
    287c:	a1 f4       	brne	.+40     	; 0x28a6 <Seven_segment_init+0x6c>
  {
	  DIO_setPinDir(PORTID, PIN0, OUT);
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN1, OUT);
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN2, OUT);
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	62 e0       	ldi	r22, 0x02	; 2
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN3, OUT);
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_setPinDir>
  }
  else
  {
	  /*do nothing*/
  }
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <Write_Seven_segment>:


/*********************write value on 7_segment*****************/
void Write_Seven_segment(u8 PORTID,u8 type, u8 num)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	27 97       	sbiw	r28, 0x07	; 7
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	6a 83       	std	Y+2, r22	; 0x02
    28c8:	4b 83       	std	Y+3, r20	; 0x03
	if(type == MSB)
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	81 30       	cpi	r24, 0x01	; 1
    28ce:	09 f0       	breq	.+2      	; 0x28d2 <Write_Seven_segment+0x22>
    28d0:	6b c0       	rjmp	.+214    	; 0x29a8 <Write_Seven_segment+0xf8>
	{
		switch(PORTID)
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	3f 83       	std	Y+7, r19	; 0x07
    28da:	2e 83       	std	Y+6, r18	; 0x06
    28dc:	8e 81       	ldd	r24, Y+6	; 0x06
    28de:	9f 81       	ldd	r25, Y+7	; 0x07
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	91 05       	cpc	r25, r1
    28e4:	41 f1       	breq	.+80     	; 0x2936 <Write_Seven_segment+0x86>
    28e6:	2e 81       	ldd	r18, Y+6	; 0x06
    28e8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ea:	22 30       	cpi	r18, 0x02	; 2
    28ec:	31 05       	cpc	r19, r1
    28ee:	2c f4       	brge	.+10     	; 0x28fa <Write_Seven_segment+0x4a>
    28f0:	8e 81       	ldd	r24, Y+6	; 0x06
    28f2:	9f 81       	ldd	r25, Y+7	; 0x07
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	61 f0       	breq	.+24     	; 0x2910 <Write_Seven_segment+0x60>
    28f8:	a1 c0       	rjmp	.+322    	; 0x2a3c <Write_Seven_segment+0x18c>
    28fa:	2e 81       	ldd	r18, Y+6	; 0x06
    28fc:	3f 81       	ldd	r19, Y+7	; 0x07
    28fe:	22 30       	cpi	r18, 0x02	; 2
    2900:	31 05       	cpc	r19, r1
    2902:	61 f1       	breq	.+88     	; 0x295c <Write_Seven_segment+0xac>
    2904:	8e 81       	ldd	r24, Y+6	; 0x06
    2906:	9f 81       	ldd	r25, Y+7	; 0x07
    2908:	83 30       	cpi	r24, 0x03	; 3
    290a:	91 05       	cpc	r25, r1
    290c:	d1 f1       	breq	.+116    	; 0x2982 <Write_Seven_segment+0xd2>
    290e:	96 c0       	rjmp	.+300    	; 0x2a3c <Write_Seven_segment+0x18c>
				{
				case A: PORTA=(PORTA & 0x0F) | (num<<4);
    2910:	ab e3       	ldi	r26, 0x3B	; 59
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	eb e3       	ldi	r30, 0x3B	; 59
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	28 2f       	mov	r18, r24
    291c:	2f 70       	andi	r18, 0x0F	; 15
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	82 95       	swap	r24
    2926:	92 95       	swap	r25
    2928:	90 7f       	andi	r25, 0xF0	; 240
    292a:	98 27       	eor	r25, r24
    292c:	80 7f       	andi	r24, 0xF0	; 240
    292e:	98 27       	eor	r25, r24
    2930:	82 2b       	or	r24, r18
    2932:	8c 93       	st	X, r24
    2934:	83 c0       	rjmp	.+262    	; 0x2a3c <Write_Seven_segment+0x18c>
					break;
				case B: PORTB=(PORTB & 0x0F) | (num<<4);
    2936:	a8 e3       	ldi	r26, 0x38	; 56
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e8 e3       	ldi	r30, 0x38	; 56
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	28 2f       	mov	r18, r24
    2942:	2f 70       	andi	r18, 0x0F	; 15
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	82 95       	swap	r24
    294c:	92 95       	swap	r25
    294e:	90 7f       	andi	r25, 0xF0	; 240
    2950:	98 27       	eor	r25, r24
    2952:	80 7f       	andi	r24, 0xF0	; 240
    2954:	98 27       	eor	r25, r24
    2956:	82 2b       	or	r24, r18
    2958:	8c 93       	st	X, r24
    295a:	70 c0       	rjmp	.+224    	; 0x2a3c <Write_Seven_segment+0x18c>
					break;
				case C: PORTC=(PORTC & 0x0F) | (num<<4);
    295c:	a5 e3       	ldi	r26, 0x35	; 53
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e5 e3       	ldi	r30, 0x35	; 53
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	28 2f       	mov	r18, r24
    2968:	2f 70       	andi	r18, 0x0F	; 15
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	82 95       	swap	r24
    2972:	92 95       	swap	r25
    2974:	90 7f       	andi	r25, 0xF0	; 240
    2976:	98 27       	eor	r25, r24
    2978:	80 7f       	andi	r24, 0xF0	; 240
    297a:	98 27       	eor	r25, r24
    297c:	82 2b       	or	r24, r18
    297e:	8c 93       	st	X, r24
    2980:	5d c0       	rjmp	.+186    	; 0x2a3c <Write_Seven_segment+0x18c>
					break;
				case D: PORTD=(PORTD & 0x0F) | (num<<4);
    2982:	a2 e3       	ldi	r26, 0x32	; 50
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e2 e3       	ldi	r30, 0x32	; 50
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	28 2f       	mov	r18, r24
    298e:	2f 70       	andi	r18, 0x0F	; 15
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	82 95       	swap	r24
    2998:	92 95       	swap	r25
    299a:	90 7f       	andi	r25, 0xF0	; 240
    299c:	98 27       	eor	r25, r24
    299e:	80 7f       	andi	r24, 0xF0	; 240
    29a0:	98 27       	eor	r25, r24
    29a2:	82 2b       	or	r24, r18
    29a4:	8c 93       	st	X, r24
    29a6:	4a c0       	rjmp	.+148    	; 0x2a3c <Write_Seven_segment+0x18c>
					break;
				default:/*do no thing*/
					break;
				}
	}
	else if (type == LSB)
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	88 23       	and	r24, r24
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <Write_Seven_segment+0x100>
    29ae:	46 c0       	rjmp	.+140    	; 0x2a3c <Write_Seven_segment+0x18c>
	{
		switch(PORTID)
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	3d 83       	std	Y+5, r19	; 0x05
    29b8:	2c 83       	std	Y+4, r18	; 0x04
    29ba:	8c 81       	ldd	r24, Y+4	; 0x04
    29bc:	9d 81       	ldd	r25, Y+5	; 0x05
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	91 05       	cpc	r25, r1
    29c2:	f9 f0       	breq	.+62     	; 0x2a02 <Write_Seven_segment+0x152>
    29c4:	2c 81       	ldd	r18, Y+4	; 0x04
    29c6:	3d 81       	ldd	r19, Y+5	; 0x05
    29c8:	22 30       	cpi	r18, 0x02	; 2
    29ca:	31 05       	cpc	r19, r1
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <Write_Seven_segment+0x128>
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	9d 81       	ldd	r25, Y+5	; 0x05
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	61 f0       	breq	.+24     	; 0x29ee <Write_Seven_segment+0x13e>
    29d6:	32 c0       	rjmp	.+100    	; 0x2a3c <Write_Seven_segment+0x18c>
    29d8:	2c 81       	ldd	r18, Y+4	; 0x04
    29da:	3d 81       	ldd	r19, Y+5	; 0x05
    29dc:	22 30       	cpi	r18, 0x02	; 2
    29de:	31 05       	cpc	r19, r1
    29e0:	d1 f0       	breq	.+52     	; 0x2a16 <Write_Seven_segment+0x166>
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	9d 81       	ldd	r25, Y+5	; 0x05
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	91 05       	cpc	r25, r1
    29ea:	f9 f0       	breq	.+62     	; 0x2a2a <Write_Seven_segment+0x17a>
    29ec:	27 c0       	rjmp	.+78     	; 0x2a3c <Write_Seven_segment+0x18c>
		{
		case A: PORTA=(PORTID & 0xF0) | (num & 0x0F);
    29ee:	eb e3       	ldi	r30, 0x3B	; 59
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	98 2f       	mov	r25, r24
    29f6:	90 7f       	andi	r25, 0xF0	; 240
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	8f 70       	andi	r24, 0x0F	; 15
    29fc:	89 2b       	or	r24, r25
    29fe:	80 83       	st	Z, r24
    2a00:	1d c0       	rjmp	.+58     	; 0x2a3c <Write_Seven_segment+0x18c>
			break;
		case B: PORTB=(PORTID & 0xF0) | (num & 0x0F);
    2a02:	e8 e3       	ldi	r30, 0x38	; 56
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	98 2f       	mov	r25, r24
    2a0a:	90 7f       	andi	r25, 0xF0	; 240
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	8f 70       	andi	r24, 0x0F	; 15
    2a10:	89 2b       	or	r24, r25
    2a12:	80 83       	st	Z, r24
    2a14:	13 c0       	rjmp	.+38     	; 0x2a3c <Write_Seven_segment+0x18c>
			break;
		case C: PORTC=(PORTID & 0xF0) | (num & 0x0F);
    2a16:	e5 e3       	ldi	r30, 0x35	; 53
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	98 2f       	mov	r25, r24
    2a1e:	90 7f       	andi	r25, 0xF0	; 240
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	8f 70       	andi	r24, 0x0F	; 15
    2a24:	89 2b       	or	r24, r25
    2a26:	80 83       	st	Z, r24
    2a28:	09 c0       	rjmp	.+18     	; 0x2a3c <Write_Seven_segment+0x18c>
			break;
		case D: PORTD=(PORTID & 0xF0) | (num & 0x0F);
    2a2a:	e2 e3       	ldi	r30, 0x32	; 50
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	98 2f       	mov	r25, r24
    2a32:	90 7f       	andi	r25, 0xF0	; 240
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	8f 70       	andi	r24, 0x0F	; 15
    2a38:	89 2b       	or	r24, r25
    2a3a:	80 83       	st	Z, r24
			break;
		default:/*do no thing*/
			break;
		}
	}
}
    2a3c:	27 96       	adiw	r28, 0x07	; 7
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	cd bf       	out	0x3d, r28	; 61
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <Read_Seven_segment>:


/***********************read value on 7_segment***********************/
u8 Read_Seven_segment(u8 PORTID,u8 type)
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <Read_Seven_segment+0x6>
    2a54:	0f 92       	push	r0
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
    2a5c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Bits = 0;
    2a5e:	19 82       	std	Y+1, r1	; 0x01
	if(type == MSB)
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	29 f4       	brne	.+10     	; 0x2a70 <Read_Seven_segment+0x22>
	{
		Bits = ((PORTID & 0xF0)>>4);
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	82 95       	swap	r24
    2a6a:	8f 70       	andi	r24, 0x0F	; 15
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	06 c0       	rjmp	.+12     	; 0x2a7c <Read_Seven_segment+0x2e>
	}
	else if (type == LSB)
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	88 23       	and	r24, r24
    2a74:	19 f4       	brne	.+6      	; 0x2a7c <Read_Seven_segment+0x2e>
	{
		Bits = (PORTID & 0x0F);
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	8f 70       	andi	r24, 0x0F	; 15
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Bits ;
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <BothSevenSegmentWrite>:


/***********************write value on both 7_segment***********************/
void BothSevenSegmentWrite(u8 PORTID,u8 type,u8 val)
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	a2 97       	sbiw	r28, 0x22	; 34
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	88 a3       	std	Y+32, r24	; 0x20
    2aa0:	69 a3       	std	Y+33, r22	; 0x21
    2aa2:	4a a3       	std	Y+34, r20	; 0x22
	u8 tens,ones;
	if (val <= 99)
    2aa4:	8a a1       	ldd	r24, Y+34	; 0x22
    2aa6:	84 36       	cpi	r24, 0x64	; 100
    2aa8:	08 f0       	brcs	.+2      	; 0x2aac <BothSevenSegmentWrite+0x22>
    2aaa:	10 c1       	rjmp	.+544    	; 0x2ccc <BothSevenSegmentWrite+0x242>
	{
		tens = val / 10 ;
    2aac:	8a a1       	ldd	r24, Y+34	; 0x22
    2aae:	9a e0       	ldi	r25, 0x0A	; 10
    2ab0:	69 2f       	mov	r22, r25
    2ab2:	0e 94 84 1b 	call	0x3708	; 0x3708 <__udivmodqi4>
    2ab6:	8f 8f       	std	Y+31, r24	; 0x1f
		ones = val%10;
    2ab8:	8a a1       	ldd	r24, Y+34	; 0x22
    2aba:	9a e0       	ldi	r25, 0x0A	; 10
    2abc:	69 2f       	mov	r22, r25
    2abe:	0e 94 84 1b 	call	0x3708	; 0x3708 <__udivmodqi4>
    2ac2:	89 2f       	mov	r24, r25
    2ac4:	8e 8f       	std	Y+30, r24	; 0x1e
		for (u8 i = 0 ; i <= 10 ; i++)
    2ac6:	1d 8e       	std	Y+29, r1	; 0x1d
    2ac8:	fd c0       	rjmp	.+506    	; 0x2cc4 <BothSevenSegmentWrite+0x23a>
		{
			Seven_segment_disable(TENS);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
			Seven_segment_enable(UNIT);
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,ones);
    2ad6:	88 a1       	ldd	r24, Y+32	; 0x20
    2ad8:	69 a1       	ldd	r22, Y+33	; 0x21
    2ada:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2adc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Write_Seven_segment>
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ae6:	b0 e4       	ldi	r27, 0x40	; 64
    2ae8:	89 8f       	std	Y+25, r24	; 0x19
    2aea:	9a 8f       	std	Y+26, r25	; 0x1a
    2aec:	ab 8f       	std	Y+27, r26	; 0x1b
    2aee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	69 8d       	ldd	r22, Y+25	; 0x19
    2af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a e7       	ldi	r20, 0x7A	; 122
    2afe:	53 e4       	ldi	r21, 0x43	; 67
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8d 8b       	std	Y+21, r24	; 0x15
    2b0a:	9e 8b       	std	Y+22, r25	; 0x16
    2b0c:	af 8b       	std	Y+23, r26	; 0x17
    2b0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b10:	6d 89       	ldd	r22, Y+21	; 0x15
    2b12:	7e 89       	ldd	r23, Y+22	; 0x16
    2b14:	8f 89       	ldd	r24, Y+23	; 0x17
    2b16:	98 8d       	ldd	r25, Y+24	; 0x18
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <BothSevenSegmentWrite+0xa8>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <BothSevenSegmentWrite+0x126>
	else if (__tmp > 65535)
    2b32:	6d 89       	ldd	r22, Y+21	; 0x15
    2b34:	7e 89       	ldd	r23, Y+22	; 0x16
    2b36:	8f 89       	ldd	r24, Y+23	; 0x17
    2b38:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <BothSevenSegmentWrite+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9c 8b       	std	Y+20, r25	; 0x14
    2b70:	8b 8b       	std	Y+19, r24	; 0x13
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <BothSevenSegmentWrite+0x108>
    2b74:	89 e1       	ldi	r24, 0x19	; 25
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9a 8b       	std	Y+18, r25	; 0x12
    2b7a:	89 8b       	std	Y+17, r24	; 0x11
    2b7c:	89 89       	ldd	r24, Y+17	; 0x11
    2b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <BothSevenSegmentWrite+0xf6>
    2b84:	9a 8b       	std	Y+18, r25	; 0x12
    2b86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9c 8b       	std	Y+20, r25	; 0x14
    2b90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	8b 89       	ldd	r24, Y+19	; 0x13
    2b94:	9c 89       	ldd	r25, Y+20	; 0x14
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <BothSevenSegmentWrite+0xea>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <BothSevenSegmentWrite+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	8b 8b       	std	Y+19, r24	; 0x13
    2bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb4:	98 8b       	std	Y+16, r25	; 0x10
    2bb6:	8f 87       	std	Y+15, r24	; 0x0f
    2bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bba:	98 89       	ldd	r25, Y+16	; 0x10
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <BothSevenSegmentWrite+0x132>
    2bc0:	98 8b       	std	Y+16, r25	; 0x10
    2bc2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
			Seven_segment_disable(UNIT);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
			Seven_segment_enable(TENS);
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,tens);
    2bd0:	88 a1       	ldd	r24, Y+32	; 0x20
    2bd2:	69 a1       	ldd	r22, Y+33	; 0x21
    2bd4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2bd6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Write_Seven_segment>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a0 ea       	ldi	r26, 0xA0	; 160
    2be0:	b0 e4       	ldi	r27, 0x40	; 64
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	9c 87       	std	Y+12, r25	; 0x0c
    2be6:	ad 87       	std	Y+13, r26	; 0x0d
    2be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a e7       	ldi	r20, 0x7A	; 122
    2bf8:	53 e4       	ldi	r21, 0x43	; 67
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8f 83       	std	Y+7, r24	; 0x07
    2c04:	98 87       	std	Y+8, r25	; 0x08
    2c06:	a9 87       	std	Y+9, r26	; 0x09
    2c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <BothSevenSegmentWrite+0x1a2>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <BothSevenSegmentWrite+0x220>
	else if (__tmp > 65535)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <BothSevenSegmentWrite+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <BothSevenSegmentWrite+0x202>
    2c6e:	89 e1       	ldi	r24, 0x19	; 25
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <BothSevenSegmentWrite+0x1f0>
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <BothSevenSegmentWrite+0x1e4>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <BothSevenSegmentWrite+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <BothSevenSegmentWrite+0x22c>
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
	u8 tens,ones;
	if (val <= 99)
	{
		tens = val / 10 ;
		ones = val%10;
		for (u8 i = 0 ; i <= 10 ; i++)
    2cbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc0:	8f 5f       	subi	r24, 0xFF	; 255
    2cc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc6:	8b 30       	cpi	r24, 0x0B	; 11
    2cc8:	08 f4       	brcc	.+2      	; 0x2ccc <BothSevenSegmentWrite+0x242>
    2cca:	ff ce       	rjmp	.-514    	; 0x2aca <BothSevenSegmentWrite+0x40>
	}
	else
	{
		/* do nothing */
	}
}
    2ccc:	a2 96       	adiw	r28, 0x22	; 34
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <BothSevenSegmentWriteFloat>:

void BothSevenSegmentWriteFloat(u8 PORTID,u8 type,u32 val)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	a5 97       	sbiw	r28, 0x25	; 37
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	88 a3       	std	Y+32, r24	; 0x20
    2cf4:	69 a3       	std	Y+33, r22	; 0x21
    2cf6:	2a a3       	std	Y+34, r18	; 0x22
    2cf8:	3b a3       	std	Y+35, r19	; 0x23
    2cfa:	4c a3       	std	Y+36, r20	; 0x24
    2cfc:	5d a3       	std	Y+37, r21	; 0x25
	u8 tens,ones;
	if (val <= 99)
    2cfe:	8a a1       	ldd	r24, Y+34	; 0x22
    2d00:	9b a1       	ldd	r25, Y+35	; 0x23
    2d02:	ac a1       	ldd	r26, Y+36	; 0x24
    2d04:	bd a1       	ldd	r27, Y+37	; 0x25
    2d06:	84 36       	cpi	r24, 0x64	; 100
    2d08:	91 05       	cpc	r25, r1
    2d0a:	a1 05       	cpc	r26, r1
    2d0c:	b1 05       	cpc	r27, r1
    2d0e:	08 f0       	brcs	.+2      	; 0x2d12 <BothSevenSegmentWriteFloat+0x34>
    2d10:	21 c1       	rjmp	.+578    	; 0x2f54 <BothSevenSegmentWriteFloat+0x276>
	{
		tens = val / 10 ;
    2d12:	8a a1       	ldd	r24, Y+34	; 0x22
    2d14:	9b a1       	ldd	r25, Y+35	; 0x23
    2d16:	ac a1       	ldd	r26, Y+36	; 0x24
    2d18:	bd a1       	ldd	r27, Y+37	; 0x25
    2d1a:	2a e0       	ldi	r18, 0x0A	; 10
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	50 e0       	ldi	r21, 0x00	; 0
    2d22:	bc 01       	movw	r22, r24
    2d24:	cd 01       	movw	r24, r26
    2d26:	0e 94 90 1b 	call	0x3720	; 0x3720 <__udivmodsi4>
    2d2a:	da 01       	movw	r26, r20
    2d2c:	c9 01       	movw	r24, r18
    2d2e:	8f 8f       	std	Y+31, r24	; 0x1f
		ones = val%10;
    2d30:	8a a1       	ldd	r24, Y+34	; 0x22
    2d32:	9b a1       	ldd	r25, Y+35	; 0x23
    2d34:	ac a1       	ldd	r26, Y+36	; 0x24
    2d36:	bd a1       	ldd	r27, Y+37	; 0x25
    2d38:	2a e0       	ldi	r18, 0x0A	; 10
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	0e 94 90 1b 	call	0x3720	; 0x3720 <__udivmodsi4>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	8e 8f       	std	Y+30, r24	; 0x1e
		for (u8 i = 0 ; i <= 10 ; i++)
    2d4e:	1d 8e       	std	Y+29, r1	; 0x1d
    2d50:	fd c0       	rjmp	.+506    	; 0x2f4c <BothSevenSegmentWriteFloat+0x26e>
		{
			Seven_segment_disable(TENS);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
			Seven_segment_enable(UNIT);
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,ones);
    2d5e:	88 a1       	ldd	r24, Y+32	; 0x20
    2d60:	69 a1       	ldd	r22, Y+33	; 0x21
    2d62:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2d64:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Write_Seven_segment>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2d6e:	b0 e4       	ldi	r27, 0x40	; 64
    2d70:	89 8f       	std	Y+25, r24	; 0x19
    2d72:	9a 8f       	std	Y+26, r25	; 0x1a
    2d74:	ab 8f       	std	Y+27, r26	; 0x1b
    2d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	69 8d       	ldd	r22, Y+25	; 0x19
    2d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a e7       	ldi	r20, 0x7A	; 122
    2d86:	53 e4       	ldi	r21, 0x43	; 67
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8d 8b       	std	Y+21, r24	; 0x15
    2d92:	9e 8b       	std	Y+22, r25	; 0x16
    2d94:	af 8b       	std	Y+23, r26	; 0x17
    2d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d98:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <BothSevenSegmentWriteFloat+0xdc>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	8b 8b       	std	Y+19, r24	; 0x13
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <BothSevenSegmentWriteFloat+0x15a>
	else if (__tmp > 65535)
    2dba:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <BothSevenSegmentWriteFloat+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9c 8b       	std	Y+20, r25	; 0x14
    2df8:	8b 8b       	std	Y+19, r24	; 0x13
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <BothSevenSegmentWriteFloat+0x13c>
    2dfc:	89 e1       	ldi	r24, 0x19	; 25
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9a 8b       	std	Y+18, r25	; 0x12
    2e02:	89 8b       	std	Y+17, r24	; 0x11
    2e04:	89 89       	ldd	r24, Y+17	; 0x11
    2e06:	9a 89       	ldd	r25, Y+18	; 0x12
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <BothSevenSegmentWriteFloat+0x12a>
    2e0c:	9a 8b       	std	Y+18, r25	; 0x12
    2e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8b 89       	ldd	r24, Y+19	; 0x13
    2e12:	9c 89       	ldd	r25, Y+20	; 0x14
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9c 8b       	std	Y+20, r25	; 0x14
    2e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <BothSevenSegmentWriteFloat+0x11e>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <BothSevenSegmentWriteFloat+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6d 89       	ldd	r22, Y+21	; 0x15
    2e26:	7e 89       	ldd	r23, Y+22	; 0x16
    2e28:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9c 8b       	std	Y+20, r25	; 0x14
    2e36:	8b 8b       	std	Y+19, r24	; 0x13
    2e38:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3c:	98 8b       	std	Y+16, r25	; 0x10
    2e3e:	8f 87       	std	Y+15, r24	; 0x0f
    2e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e42:	98 89       	ldd	r25, Y+16	; 0x10
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <BothSevenSegmentWriteFloat+0x166>
    2e48:	98 8b       	std	Y+16, r25	; 0x10
    2e4a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
			Seven_segment_disable(UNIT);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
			Seven_segment_enable(TENS);
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,tens);
    2e58:	88 a1       	ldd	r24, Y+32	; 0x20
    2e5a:	69 a1       	ldd	r22, Y+33	; 0x21
    2e5c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e5e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Write_Seven_segment>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 ea       	ldi	r26, 0xA0	; 160
    2e68:	b0 e4       	ldi	r27, 0x40	; 64
    2e6a:	8b 87       	std	Y+11, r24	; 0x0b
    2e6c:	9c 87       	std	Y+12, r25	; 0x0c
    2e6e:	ad 87       	std	Y+13, r26	; 0x0d
    2e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	4a e7       	ldi	r20, 0x7A	; 122
    2e80:	53 e4       	ldi	r21, 0x43	; 67
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	8f 83       	std	Y+7, r24	; 0x07
    2e8c:	98 87       	std	Y+8, r25	; 0x08
    2e8e:	a9 87       	std	Y+9, r26	; 0x09
    2e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e92:	6f 81       	ldd	r22, Y+7	; 0x07
    2e94:	78 85       	ldd	r23, Y+8	; 0x08
    2e96:	89 85       	ldd	r24, Y+9	; 0x09
    2e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e8       	ldi	r20, 0x80	; 128
    2ea0:	5f e3       	ldi	r21, 0x3F	; 63
    2ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	2c f4       	brge	.+10     	; 0x2eb4 <BothSevenSegmentWriteFloat+0x1d6>
		__ticks = 1;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	9e 83       	std	Y+6, r25	; 0x06
    2eb0:	8d 83       	std	Y+5, r24	; 0x05
    2eb2:	3f c0       	rjmp	.+126    	; 0x2f32 <BothSevenSegmentWriteFloat+0x254>
	else if (__tmp > 65535)
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	3f ef       	ldi	r19, 0xFF	; 255
    2ec0:	4f e7       	ldi	r20, 0x7F	; 127
    2ec2:	57 e4       	ldi	r21, 0x47	; 71
    2ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec8:	18 16       	cp	r1, r24
    2eca:	4c f5       	brge	.+82     	; 0x2f1e <BothSevenSegmentWriteFloat+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e2       	ldi	r20, 0x20	; 32
    2eda:	51 e4       	ldi	r21, 0x41	; 65
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	0f c0       	rjmp	.+30     	; 0x2f14 <BothSevenSegmentWriteFloat+0x236>
    2ef6:	89 e1       	ldi	r24, 0x19	; 25
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	9c 83       	std	Y+4, r25	; 0x04
    2efc:	8b 83       	std	Y+3, r24	; 0x03
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <BothSevenSegmentWriteFloat+0x224>
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	00 97       	sbiw	r24, 0x00	; 0
    2f1a:	69 f7       	brne	.-38     	; 0x2ef6 <BothSevenSegmentWriteFloat+0x218>
    2f1c:	14 c0       	rjmp	.+40     	; 0x2f46 <BothSevenSegmentWriteFloat+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f20:	78 85       	ldd	r23, Y+8	; 0x08
    2f22:	89 85       	ldd	r24, Y+9	; 0x09
    2f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <BothSevenSegmentWriteFloat+0x260>
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
	u8 tens,ones;
	if (val <= 99)
	{
		tens = val / 10 ;
		ones = val%10;
		for (u8 i = 0 ; i <= 10 ; i++)
    2f46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f48:	8f 5f       	subi	r24, 0xFF	; 255
    2f4a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f4e:	8b 30       	cpi	r24, 0x0B	; 11
    2f50:	08 f4       	brcc	.+2      	; 0x2f54 <BothSevenSegmentWriteFloat+0x276>
    2f52:	ff ce       	rjmp	.-514    	; 0x2d52 <BothSevenSegmentWriteFloat+0x74>
	}
	else
	{
		/* do nothing */
	}
}
    2f54:	a5 96       	adiw	r28, 0x25	; 37
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	08 95       	ret

00002f66 <SevenSegmentWriteFloat>:

void SevenSegmentWriteFloat(u8 PORTID,u8 type,u32 val)
{
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	28 97       	sbiw	r28, 0x08	; 8
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	8b 83       	std	Y+3, r24	; 0x03
    2f7c:	6c 83       	std	Y+4, r22	; 0x04
    2f7e:	2d 83       	std	Y+5, r18	; 0x05
    2f80:	3e 83       	std	Y+6, r19	; 0x06
    2f82:	4f 83       	std	Y+7, r20	; 0x07
    2f84:	58 87       	std	Y+8, r21	; 0x08
	u8 tens,ones;
	if (val <= 99)
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8a:	af 81       	ldd	r26, Y+7	; 0x07
    2f8c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f8e:	84 36       	cpi	r24, 0x64	; 100
    2f90:	91 05       	cpc	r25, r1
    2f92:	a1 05       	cpc	r26, r1
    2f94:	b1 05       	cpc	r27, r1
    2f96:	a8 f5       	brcc	.+106    	; 0x3002 <SevenSegmentWriteFloat+0x9c>
	{
		tens = val / 10 ;
    2f98:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9c:	af 81       	ldd	r26, Y+7	; 0x07
    2f9e:	b8 85       	ldd	r27, Y+8	; 0x08
    2fa0:	2a e0       	ldi	r18, 0x0A	; 10
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	50 e0       	ldi	r21, 0x00	; 0
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 90 1b 	call	0x3720	; 0x3720 <__udivmodsi4>
    2fb0:	da 01       	movw	r26, r20
    2fb2:	c9 01       	movw	r24, r18
    2fb4:	8a 83       	std	Y+2, r24	; 0x02
		ones = val%10;
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	af 81       	ldd	r26, Y+7	; 0x07
    2fbc:	b8 85       	ldd	r27, Y+8	; 0x08
    2fbe:	2a e0       	ldi	r18, 0x0A	; 10
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 90 1b 	call	0x3720	; 0x3720 <__udivmodsi4>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	89 83       	std	Y+1, r24	; 0x01
		Seven_segment_enable(UNIT);
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Seven_segment_enable>
		Seven_segment_enable(TENS);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Seven_segment_enable>
		if (type == MSB)
    2fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe2:	81 30       	cpi	r24, 0x01	; 1
    2fe4:	31 f4       	brne	.+12     	; 0x2ff2 <SevenSegmentWriteFloat+0x8c>
		{
			Write_Seven_segment(B,MSB,ones);
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	61 e0       	ldi	r22, 0x01	; 1
    2fea:	49 81       	ldd	r20, Y+1	; 0x01
    2fec:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Write_Seven_segment>
    2ff0:	08 c0       	rjmp	.+16     	; 0x3002 <SevenSegmentWriteFloat+0x9c>
		}
		else if (type == LSB)
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	88 23       	and	r24, r24
    2ff6:	29 f4       	brne	.+10     	; 0x3002 <SevenSegmentWriteFloat+0x9c>
		{
			Write_Seven_segment(A,LSB,tens);
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	4a 81       	ldd	r20, Y+2	; 0x02
    2ffe:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Write_Seven_segment>
	}
	else
	{
		/* do nothing */
	}
}
    3002:	28 96       	adiw	r28, 0x08	; 8
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <APP_init>:

/************************************************************************/
/* APP_init(void) function is where we initialize every hardware and    */
/*                 peripheral we need in the project                    */
void APP_init(void)
{
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	2e 97       	sbiw	r28, 0x0e	; 14
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
	/*In Water Heater Project we have */
	
	/*          Interrupt               */
	interrupt_init(EX_INT0,FALLING_MODE);  /*Up Button as Interrupt 0*/
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	62 e0       	ldi	r22, 0x02	; 2
    302c:	0e 94 4e 0a 	call	0x149c	; 0x149c <interrupt_init>
	interrupt_init(EX_INT1,FALLING_MODE);  /*Down Button as Interrupt 1*/
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	62 e0       	ldi	r22, 0x02	; 2
    3034:	0e 94 4e 0a 	call	0x149c	; 0x149c <interrupt_init>
	interrupt_init(EX_INT2,FALLING_MODE);  /*Off/On Button as Interrupt 2*/
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	62 e0       	ldi	r22, 0x02	; 2
    303c:	0e 94 4e 0a 	call	0x149c	; 0x149c <interrupt_init>
	
	/*          Timer                  */
	timer0_init(OVERFLOW_MODE);     /*timer 0 set as Overflow timer*/
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	0e 94 75 07 	call	0xeea	; 0xeea <timer0_init>
	timer0_interrupt(OVERFLOW_MODE);   /*to allow timer interrupt*/
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	0e 94 62 09 	call	0x12c4	; 0x12c4 <timer0_interrupt>
	
	/*          Button                 */
	/* UP Button is Pull up */
	PB_init(D,2,PULL_UP);
    304c:	83 e0       	ldi	r24, 0x03	; 3
    304e:	62 e0       	ldi	r22, 0x02	; 2
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	0e 94 9e 13 	call	0x273c	; 0x273c <PB_init>
	/* Down Button is Pull up */  
	PB_init(D,3,PULL_UP);
    3056:	83 e0       	ldi	r24, 0x03	; 3
    3058:	63 e0       	ldi	r22, 0x03	; 3
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	0e 94 9e 13 	call	0x273c	; 0x273c <PB_init>
	/* ON/OFF Button is Pull up */
	PB_init(B,2,PULL_UP);
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	62 e0       	ldi	r22, 0x02	; 2
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	0e 94 9e 13 	call	0x273c	; 0x273c <PB_init>
	
	/*          7 Segment               */
	Seven_segment_init(A,LSB); 
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	0e 94 1d 14 	call	0x283a	; 0x283a <Seven_segment_init>
	Seven_segment_init(B,MSB);
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	61 e0       	ldi	r22, 0x01	; 1
    3076:	0e 94 1d 14 	call	0x283a	; 0x283a <Seven_segment_init>
	
	/*          EEPROM                  */
	EEPROM_init();
    307a:	0e 94 39 13 	call	0x2672	; 0x2672 <EEPROM_init>
 	EEPROM_WRITE(ADDRESS,setTemp);
    307e:	20 91 68 01 	lds	r18, 0x0168
    3082:	81 e1       	ldi	r24, 0x11	; 17
    3084:	93 e0       	ldi	r25, 0x03	; 3
    3086:	62 2f       	mov	r22, r18
    3088:	0e 94 42 13 	call	0x2684	; 0x2684 <EEPROM_WRITE>
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a0 e2       	ldi	r26, 0x20	; 32
    3092:	b1 e4       	ldi	r27, 0x41	; 65
    3094:	8b 87       	std	Y+11, r24	; 0x0b
    3096:	9c 87       	std	Y+12, r25	; 0x0c
    3098:	ad 87       	std	Y+13, r26	; 0x0d
    309a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309c:	6b 85       	ldd	r22, Y+11	; 0x0b
    309e:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a e7       	ldi	r20, 0x7A	; 122
    30aa:	53 e4       	ldi	r21, 0x43	; 67
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8f 83       	std	Y+7, r24	; 0x07
    30b6:	98 87       	std	Y+8, r25	; 0x08
    30b8:	a9 87       	std	Y+9, r26	; 0x09
    30ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30bc:	6f 81       	ldd	r22, Y+7	; 0x07
    30be:	78 85       	ldd	r23, Y+8	; 0x08
    30c0:	89 85       	ldd	r24, Y+9	; 0x09
    30c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e8       	ldi	r20, 0x80	; 128
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d0:	88 23       	and	r24, r24
    30d2:	2c f4       	brge	.+10     	; 0x30de <APP_init+0xca>
		__ticks = 1;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
    30dc:	3f c0       	rjmp	.+126    	; 0x315c <APP_init+0x148>
	else if (__tmp > 65535)
    30de:	6f 81       	ldd	r22, Y+7	; 0x07
    30e0:	78 85       	ldd	r23, Y+8	; 0x08
    30e2:	89 85       	ldd	r24, Y+9	; 0x09
    30e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	3f ef       	ldi	r19, 0xFF	; 255
    30ea:	4f e7       	ldi	r20, 0x7F	; 127
    30ec:	57 e4       	ldi	r21, 0x47	; 71
    30ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30f2:	18 16       	cp	r1, r24
    30f4:	4c f5       	brge	.+82     	; 0x3148 <APP_init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e2       	ldi	r20, 0x20	; 32
    3104:	51 e4       	ldi	r21, 0x41	; 65
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	0f c0       	rjmp	.+30     	; 0x313e <APP_init+0x12a>
    3120:	89 e1       	ldi	r24, 0x19	; 25
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9c 83       	std	Y+4, r25	; 0x04
    3126:	8b 83       	std	Y+3, r24	; 0x03
    3128:	8b 81       	ldd	r24, Y+3	; 0x03
    312a:	9c 81       	ldd	r25, Y+4	; 0x04
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <APP_init+0x118>
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3134:	8d 81       	ldd	r24, Y+5	; 0x05
    3136:	9e 81       	ldd	r25, Y+6	; 0x06
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	9e 83       	std	Y+6, r25	; 0x06
    313c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313e:	8d 81       	ldd	r24, Y+5	; 0x05
    3140:	9e 81       	ldd	r25, Y+6	; 0x06
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	69 f7       	brne	.-38     	; 0x3120 <APP_init+0x10c>
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <APP_init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3148:	6f 81       	ldd	r22, Y+7	; 0x07
    314a:	78 85       	ldd	r23, Y+8	; 0x08
    314c:	89 85       	ldd	r24, Y+9	; 0x09
    314e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9e 83       	std	Y+6, r25	; 0x06
    315a:	8d 83       	std	Y+5, r24	; 0x05
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	9e 81       	ldd	r25, Y+6	; 0x06
    3160:	9a 83       	std	Y+2, r25	; 0x02
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	9a 81       	ldd	r25, Y+2	; 0x02
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <APP_init+0x154>
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
 	_delay_ms(10);
	
	/*               Heater             */
	HEAT_INIT();
    3170:	0e 94 0d 12 	call	0x241a	; 0x241a <HEAT_INIT>
	COOL_INIT();
    3174:	0e 94 31 12 	call	0x2462	; 0x2462 <COOL_INIT>
	State_led_INIT();
    3178:	0e 94 55 12 	call	0x24aa	; 0x24aa <State_led_INIT>
	/*          Temp Sensor            */
	LM35_init(A,ADC7);
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	67 e0       	ldi	r22, 0x07	; 7
    3180:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LM35_init>
	
	
}
    3184:	2e 96       	adiw	r28, 0x0e	; 14
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <APP_start>:

/************************************************************************/
/* APP_start(void) function is where we put our super loop which contain*/
/*                      the flow of our project                         */
void APP_start(void)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	00 d0       	rcall	.+0      	; 0x319c <APP_start+0x6>
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
	/*Enter Super Loop*/
	while(1)
	{
		/*switch on the state*/
		switch (state)
    31a0:	80 91 6a 01 	lds	r24, 0x016A
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	3a 83       	std	Y+2, r19	; 0x02
    31aa:	29 83       	std	Y+1, r18	; 0x01
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	81 30       	cpi	r24, 0x01	; 1
    31b2:	91 05       	cpc	r25, r1
    31b4:	61 f0       	breq	.+24     	; 0x31ce <APP_start+0x38>
    31b6:	29 81       	ldd	r18, Y+1	; 0x01
    31b8:	3a 81       	ldd	r19, Y+2	; 0x02
    31ba:	22 30       	cpi	r18, 0x02	; 2
    31bc:	31 05       	cpc	r19, r1
    31be:	51 f0       	breq	.+20     	; 0x31d4 <APP_start+0x3e>
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	9a 81       	ldd	r25, Y+2	; 0x02
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	49 f4       	brne	.+18     	; 0x31da <APP_start+0x44>
		{
			case OFF:
			/*state = OFF*/
			OffMode();   /*OffMode function*/
    31c8:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <OffMode>
    31cc:	e9 cf       	rjmp	.-46     	; 0x31a0 <APP_start+0xa>
			break;  /*to get out of switch*/
			case ON:
			/*state = ON*/
			OnMode();   /*OnMode function*/
    31ce:	0e 94 0b 19 	call	0x3216	; 0x3216 <OnMode>
    31d2:	e6 cf       	rjmp	.-52     	; 0x31a0 <APP_start+0xa>
			break;  /*to get out of switch*/
			case SET:
			/*state = SET*/
			setState();  /*setState*/
    31d4:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <setState>
    31d8:	e3 cf       	rjmp	.-58     	; 0x31a0 <APP_start+0xa>
			break;  /*to get out of switch*/
			default:
			/*state = anything else*/
			state = OFF;  
    31da:	10 92 6a 01 	sts	0x016A, r1
    31de:	e0 cf       	rjmp	.-64     	; 0x31a0 <APP_start+0xa>

000031e0 <OffMode>:
/************************************************************************/

/************************************************************************/
/*                          Off mode Functions                          */
static void OffMode(void)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
	/*disable interrupt as there is no way to enter setting mode without system is on first*/
	interrupt_disable(EX_INT0);
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	0e 94 0c 0c 	call	0x1818	; 0x1818 <interrupt_disable>
	interrupt_disable(EX_INT1);
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <interrupt_disable>
	prevState = OFF;   /*set prevState by current state*/
    31f4:	10 92 6b 01 	sts	0x016B, r1
	/*stop every hardware or display in the project*/
	HEAT_STOP();
    31f8:	0e 94 25 12 	call	0x244a	; 0x244a <HEAT_STOP>
	COOL_STOP();
    31fc:	0e 94 49 12 	call	0x2492	; 0x2492 <COOL_STOP>
	State_led_stop();
    3200:	0e 94 6d 12 	call	0x24da	; 0x24da <State_led_stop>
	Seven_segment_disable(UNIT);
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
	Seven_segment_disable(TENS);
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
}
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <OnMode>:


/************************************************************************/
/*                           On mode Function                           */
static void OnMode(void)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	00 d0       	rcall	.+0      	; 0x321c <OnMode+0x6>
    321c:	00 d0       	rcall	.+0      	; 0x321e <OnMode+0x8>
    321e:	0f 92       	push	r0
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
	u8 savedTemp = 0;
    3224:	1d 82       	std	Y+5, r1	; 0x05
	/*enable interrupt*/
	interrupt_enable(EX_INT0);
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	0e 94 ce 0b 	call	0x179c	; 0x179c <interrupt_enable>
	interrupt_enable(EX_INT1);
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	0e 94 ce 0b 	call	0x179c	; 0x179c <interrupt_enable>
	/*find if the prevState is Off state or it was set*/
	if (prevState == OFF)
    3232:	80 91 6b 01 	lds	r24, 0x016B
    3236:	88 23       	and	r24, r24
    3238:	49 f4       	brne	.+18     	; 0x324c <OnMode+0x36>
	{
		/*if it was off state then we get the saved value in the EEPROM*/
		EEPROM_READ(ADDRESS,&savedTemp);
    323a:	9e 01       	movw	r18, r28
    323c:	2b 5f       	subi	r18, 0xFB	; 251
    323e:	3f 4f       	sbci	r19, 0xFF	; 255
    3240:	81 e1       	ldi	r24, 0x11	; 17
    3242:	93 e0       	ldi	r25, 0x03	; 3
    3244:	b9 01       	movw	r22, r18
    3246:	0e 94 67 13 	call	0x26ce	; 0x26ce <EEPROM_READ>
    324a:	03 c0       	rjmp	.+6      	; 0x3252 <OnMode+0x3c>
	}
	else
	{
		/*if it was not off state the it is the setTemp value*/
		savedTemp = setTemp;
    324c:	80 91 68 01 	lds	r24, 0x0168
    3250:	8d 83       	std	Y+5, r24	; 0x05
	}
	prevState = ON;  /*set prevState by current state*/
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	80 93 6b 01 	sts	0x016B, r24
	f32 temp = 0.0;
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	a0 e0       	ldi	r26, 0x00	; 0
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	9a 83       	std	Y+2, r25	; 0x02
    3264:	ab 83       	std	Y+3, r26	; 0x03
    3266:	bc 83       	std	Y+4, r27	; 0x04
	/*get the average of the last 10 LM35 Readings*/
	temp = TempSense();
    3268:	0e 94 c9 19 	call	0x3392	; 0x3392 <TempSense>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	89 83       	std	Y+1, r24	; 0x01
    3272:	9a 83       	std	Y+2, r25	; 0x02
    3274:	ab 83       	std	Y+3, r26	; 0x03
    3276:	bc 83       	std	Y+4, r27	; 0x04
	/*Display the Value on Seven Segment*/  
	SevenSegmentWriteFloat(A,LSB,ceil(temp));
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	ab 81       	ldd	r26, Y+3	; 0x03
    327e:	bc 81       	ldd	r27, Y+4	; 0x04
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <ceil>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	9b 01       	movw	r18, r22
    3296:	ac 01       	movw	r20, r24
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <SevenSegmentWriteFloat>
	SevenSegmentWriteFloat(B,MSB,ceil(temp));
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	ab 81       	ldd	r26, Y+3	; 0x03
    32a6:	bc 81       	ldd	r27, Y+4	; 0x04
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <ceil>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	bc 01       	movw	r22, r24
    32b6:	cd 01       	movw	r24, r26
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	9b 01       	movw	r18, r22
    32be:	ac 01       	movw	r20, r24
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	61 e0       	ldi	r22, 0x01	; 1
    32c4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <SevenSegmentWriteFloat>
	/*find if the Temperature is less the set temperature by 5 or not*/
	if ((temp - savedTemp) > 5)
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ca:	88 2f       	mov	r24, r24
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	aa 27       	eor	r26, r26
    32d0:	97 fd       	sbrc	r25, 7
    32d2:	a0 95       	com	r26
    32d4:	ba 2f       	mov	r27, r26
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    32de:	9b 01       	movw	r18, r22
    32e0:	ac 01       	movw	r20, r24
    32e2:	69 81       	ldd	r22, Y+1	; 0x01
    32e4:	7a 81       	ldd	r23, Y+2	; 0x02
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ea:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 ea       	ldi	r20, 0xA0	; 160
    32fc:	50 e4       	ldi	r21, 0x40	; 64
    32fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	2c f4       	brge	.+10     	; 0x3310 <OnMode+0xfa>
	{
		/*if current Temperature is larger than set temperature 
		then cooler will be on and heater will be on*/
		HEAT_STOP();
    3306:	0e 94 25 12 	call	0x244a	; 0x244a <HEAT_STOP>
		COOL_START();
    330a:	0e 94 3d 12 	call	0x247a	; 0x247a <COOL_START>
    330e:	2c c0       	rjmp	.+88     	; 0x3368 <OnMode+0x152>
	}
	else if ((savedTemp - temp) > 5)
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	88 2f       	mov	r24, r24
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	aa 27       	eor	r26, r26
    3318:	97 fd       	sbrc	r25, 7
    331a:	a0 95       	com	r26
    331c:	ba 2f       	mov	r27, r26
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	29 81       	ldd	r18, Y+1	; 0x01
    3330:	3a 81       	ldd	r19, Y+2	; 0x02
    3332:	4b 81       	ldd	r20, Y+3	; 0x03
    3334:	5c 81       	ldd	r21, Y+4	; 0x04
    3336:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	40 ea       	ldi	r20, 0xA0	; 160
    3348:	50 e4       	ldi	r21, 0x40	; 64
    334a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334e:	18 16       	cp	r1, r24
    3350:	2c f4       	brge	.+10     	; 0x335c <OnMode+0x146>
	{
		/*if current temperature is less than the set temperature then
		cooler will be off and heater will be on*/
		COOL_STOP();
    3352:	0e 94 49 12 	call	0x2492	; 0x2492 <COOL_STOP>
		HEAT_START();
    3356:	0e 94 19 12 	call	0x2432	; 0x2432 <HEAT_START>
    335a:	06 c0       	rjmp	.+12     	; 0x3368 <OnMode+0x152>
	}
	else
	{
		/*if the difference in any case less than 5 then we are in range everything will
		be off */
		COOL_STOP();
    335c:	0e 94 49 12 	call	0x2492	; 0x2492 <COOL_STOP>
		HEAT_STOP();
    3360:	0e 94 25 12 	call	0x244a	; 0x244a <HEAT_STOP>
		State_led_stop();
    3364:	0e 94 6d 12 	call	0x24da	; 0x24da <State_led_stop>
	}
	/*check what is on*/
	if (getState()==HEAT_ON)
    3368:	0e 94 08 13 	call	0x2610	; 0x2610 <getState>
    336c:	81 30       	cpi	r24, 0x01	; 1
    336e:	19 f4       	brne	.+6      	; 0x3376 <OnMode+0x160>
	{
		/*if heater was on then toggle the state led for 1000 ms*/
		State_led_tog();
    3370:	0e 94 79 12 	call	0x24f2	; 0x24f2 <State_led_tog>
    3374:	06 c0       	rjmp	.+12     	; 0x3382 <OnMode+0x16c>
	}
	else if (getState()==COOL_ON)
    3376:	0e 94 08 13 	call	0x2610	; 0x2610 <getState>
    337a:	82 30       	cpi	r24, 0x02	; 2
    337c:	11 f4       	brne	.+4      	; 0x3382 <OnMode+0x16c>
	{
		/*if cooler was on then state led is on*/
		State_led_start();
    337e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <State_led_start>
	}
	else
	{
		/*do nothing*/
	}
}
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <TempSense>:
/************************************************************************/

/************************************************************************/
/*                 Temperature sensing function                         */
static f32 TempSense(void)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	ad 97       	sbiw	r28, 0x2d	; 45
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
	f32 temp = 0.0 ;
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e0       	ldi	r26, 0x00	; 0
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	8a 83       	std	Y+2, r24	; 0x02
    33b0:	9b 83       	std	Y+3, r25	; 0x03
    33b2:	ac 83       	std	Y+4, r26	; 0x04
    33b4:	bd 83       	std	Y+5, r27	; 0x05
	f32 readings[SIZE];  /*to save the last 10 readings of LM35*/
	u8 i = 0;
    33b6:	19 82       	std	Y+1, r1	; 0x01
	/*loop to stuck in for 10 times till the array is full*/
	for (i = 0 ; i < SIZE ; i++)
    33b8:	19 82       	std	Y+1, r1	; 0x01
    33ba:	2b c0       	rjmp	.+86     	; 0x3412 <TempSense+0x80>
	{
		/* timer calculation  
		(256/10^6) * 10*3 * 2^8 = 65.536ms  
		number of overflow = 100ms/65.536ms = 1.5258 then 2 overflows
		initial value = 2^8 - (100ms/0.256)/2 = 60.6875 = 61 */
		timer0_start(PRE256);  /*start timer*/
    33bc:	84 e0       	ldi	r24, 0x04	; 4
    33be:	0e 94 e6 07 	call	0xfcc	; 0xfcc <timer0_start>
		timer0_intial_val(READ_VALUE);  /*set initial timer value*/
    33c2:	8d e3       	ldi	r24, 0x3D	; 61
    33c4:	0e 94 8f 08 	call	0x111e	; 0x111e <timer0_intial_val>
		while(timerFlag != ON_NUM_OVERFLOWS);  // wait for 100ms
    33c8:	80 91 6c 01 	lds	r24, 0x016C
    33cc:	82 30       	cpi	r24, 0x02	; 2
    33ce:	e1 f7       	brne	.-8      	; 0x33c8 <TempSense+0x36>
		readings[i] = currentTemp; /*save the current Temperature */
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	40 91 6e 01 	lds	r20, 0x016E
    33da:	50 91 6f 01 	lds	r21, 0x016F
    33de:	60 91 70 01 	lds	r22, 0x0170
    33e2:	70 91 71 01 	lds	r23, 0x0171
    33e6:	9c 01       	movw	r18, r24
    33e8:	22 0f       	add	r18, r18
    33ea:	33 1f       	adc	r19, r19
    33ec:	22 0f       	add	r18, r18
    33ee:	33 1f       	adc	r19, r19
    33f0:	ce 01       	movw	r24, r28
    33f2:	01 96       	adiw	r24, 0x01	; 1
    33f4:	82 0f       	add	r24, r18
    33f6:	93 1f       	adc	r25, r19
    33f8:	fc 01       	movw	r30, r24
    33fa:	35 96       	adiw	r30, 0x05	; 5
    33fc:	40 83       	st	Z, r20
    33fe:	51 83       	std	Z+1, r21	; 0x01
    3400:	62 83       	std	Z+2, r22	; 0x02
    3402:	73 83       	std	Z+3, r23	; 0x03
		timer0_stop();   /*stop timer*/
    3404:	0e 94 9e 08 	call	0x113c	; 0x113c <timer0_stop>
		timerFlag = 0; 
    3408:	10 92 6c 01 	sts	0x016C, r1
{
	f32 temp = 0.0 ;
	f32 readings[SIZE];  /*to save the last 10 readings of LM35*/
	u8 i = 0;
	/*loop to stuck in for 10 times till the array is full*/
	for (i = 0 ; i < SIZE ; i++)
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	8f 5f       	subi	r24, 0xFF	; 255
    3410:	89 83       	std	Y+1, r24	; 0x01
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	8a 30       	cpi	r24, 0x0A	; 10
    3416:	90 f2       	brcs	.-92     	; 0x33bc <TempSense+0x2a>
		readings[i] = currentTemp; /*save the current Temperature */
		timer0_stop();   /*stop timer*/
		timerFlag = 0; 
	}
	/*to get sum of the last 10 readings*/
	for (i = 0 ; i < SIZE ; i++)
    3418:	19 82       	std	Y+1, r1	; 0x01
    341a:	21 c0       	rjmp	.+66     	; 0x345e <TempSense+0xcc>
	{
		temp = temp + readings[i];
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9c 01       	movw	r18, r24
    3424:	22 0f       	add	r18, r18
    3426:	33 1f       	adc	r19, r19
    3428:	22 0f       	add	r18, r18
    342a:	33 1f       	adc	r19, r19
    342c:	ce 01       	movw	r24, r28
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	82 0f       	add	r24, r18
    3432:	93 1f       	adc	r25, r19
    3434:	fc 01       	movw	r30, r24
    3436:	35 96       	adiw	r30, 0x05	; 5
    3438:	20 81       	ld	r18, Z
    343a:	31 81       	ldd	r19, Z+1	; 0x01
    343c:	42 81       	ldd	r20, Z+2	; 0x02
    343e:	53 81       	ldd	r21, Z+3	; 0x03
    3440:	6a 81       	ldd	r22, Y+2	; 0x02
    3442:	7b 81       	ldd	r23, Y+3	; 0x03
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	9d 81       	ldd	r25, Y+5	; 0x05
    3448:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	8a 83       	std	Y+2, r24	; 0x02
    3452:	9b 83       	std	Y+3, r25	; 0x03
    3454:	ac 83       	std	Y+4, r26	; 0x04
    3456:	bd 83       	std	Y+5, r27	; 0x05
		readings[i] = currentTemp; /*save the current Temperature */
		timer0_stop();   /*stop timer*/
		timerFlag = 0; 
	}
	/*to get sum of the last 10 readings*/
	for (i = 0 ; i < SIZE ; i++)
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	8f 5f       	subi	r24, 0xFF	; 255
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	8a 30       	cpi	r24, 0x0A	; 10
    3462:	e0 f2       	brcs	.-72     	; 0x341c <TempSense+0x8a>
	{
		temp = temp + readings[i];
	}
	/*to get the average*/
	temp = temp / SIZE ;
    3464:	6a 81       	ldd	r22, Y+2	; 0x02
    3466:	7b 81       	ldd	r23, Y+3	; 0x03
    3468:	8c 81       	ldd	r24, Y+4	; 0x04
    346a:	9d 81       	ldd	r25, Y+5	; 0x05
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e2       	ldi	r20, 0x20	; 32
    3472:	51 e4       	ldi	r21, 0x41	; 65
    3474:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	8a 83       	std	Y+2, r24	; 0x02
    347e:	9b 83       	std	Y+3, r25	; 0x03
    3480:	ac 83       	std	Y+4, r26	; 0x04
    3482:	bd 83       	std	Y+5, r27	; 0x05
	/*return the average*/
	return temp;
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	9b 81       	ldd	r25, Y+3	; 0x03
    3488:	ac 81       	ldd	r26, Y+4	; 0x04
    348a:	bd 81       	ldd	r27, Y+5	; 0x05
}
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	ad 96       	adiw	r28, 0x2d	; 45
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	08 95       	ret

000034a2 <setState>:


/************************************************************************/
/*                   Setting Temperature state Function                 */
static void setState(void)
{
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	0f 92       	push	r0
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
	u8 temp = 0 ;
    34ac:	19 82       	std	Y+1, r1	; 0x01
	/*Enter a Super loop */
	while(1)
	{
		/*get the saved temperature*/
		EEPROM_READ(ADDRESS,&temp);
    34ae:	81 e1       	ldi	r24, 0x11	; 17
    34b0:	93 e0       	ldi	r25, 0x03	; 3
    34b2:	9e 01       	movw	r18, r28
    34b4:	2f 5f       	subi	r18, 0xFF	; 255
    34b6:	3f 4f       	sbci	r19, 0xFF	; 255
    34b8:	b9 01       	movw	r22, r18
    34ba:	0e 94 67 13 	call	0x26ce	; 0x26ce <EEPROM_READ>
		/*check if the saved temperature is the set temperature*/
		if (temp == setTemp)
    34be:	99 81       	ldd	r25, Y+1	; 0x01
    34c0:	80 91 68 01 	lds	r24, 0x0168
    34c4:	98 17       	cp	r25, r24
    34c6:	29 f4       	brne	.+10     	; 0x34d2 <setState+0x30>
		{
			/*if they are equal then increase the counter flag*/
			counterFlag++;
    34c8:	80 91 6d 01 	lds	r24, 0x016D
    34cc:	8f 5f       	subi	r24, 0xFF	; 255
    34ce:	80 93 6d 01 	sts	0x016D, r24
		else
		{
			/*do nothing*/
		}
		/*check on the counter flag value*/
		if (counterFlag > 5)
    34d2:	80 91 6d 01 	lds	r24, 0x016D
    34d6:	86 30       	cpi	r24, 0x06	; 6
    34d8:	c0 f4       	brcc	.+48     	; 0x350a <setState+0x68>
			/*timer calculation
			(1024/10^6)*10^3*2^8 = 262.144
			1000/262.144 = 3.8146 then 4 overflows 
			initial value = 2^8 - (1000/1.024)/4 = 11.859 = 12*/
			/*start timer and set initial value*/
			timer0_start(PRE1024);
    34da:	85 e0       	ldi	r24, 0x05	; 5
    34dc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <timer0_start>
			timer0_intial_val(SET_INTIAL_VALUE);
    34e0:	8c e0       	ldi	r24, 0x0C	; 12
    34e2:	0e 94 8f 08 	call	0x111e	; 0x111e <timer0_intial_val>
			/*write the value of the set temperature in EEPROM*/
			EEPROM_WRITE(ADDRESS,setTemp);
    34e6:	20 91 68 01 	lds	r18, 0x0168
    34ea:	81 e1       	ldi	r24, 0x11	; 17
    34ec:	93 e0       	ldi	r25, 0x03	; 3
    34ee:	62 2f       	mov	r22, r18
    34f0:	0e 94 42 13 	call	0x2684	; 0x2684 <EEPROM_WRITE>
			/*blink seven segment*/
			SevenSegmentBlink();
    34f4:	0e 94 8c 1a 	call	0x3518	; 0x3518 <SevenSegmentBlink>
			/*wait for 1 second and we use counter flag to do this 5 times */
			while(timerFlag != SET_NUM_OVERFLOWS);
    34f8:	80 91 6c 01 	lds	r24, 0x016C
    34fc:	84 30       	cpi	r24, 0x04	; 4
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <setState+0x56>
			timer0_stop();  /*stop timer*/
    3500:	0e 94 9e 08 	call	0x113c	; 0x113c <timer0_stop>
			timerFlag = 0;
    3504:	10 92 6c 01 	sts	0x016C, r1
    3508:	d2 cf       	rjmp	.-92     	; 0x34ae <setState+0xc>
		}
	}
	/*set state back to ON*/
	state = ON;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	80 93 6a 01 	sts	0x016A, r24
}
    3510:	0f 90       	pop	r0
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <SevenSegmentBlink>:


/************************************************************************/
/*                   Seven Segment Blink Function                       */
static void SevenSegmentBlink(void)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	/*prev is static to keep its value even after the function*/
	static u8 prev = 0;
	/*check on prev*/
	if (prev == 1)
    3520:	80 91 72 01 	lds	r24, 0x0172
    3524:	81 30       	cpi	r24, 0x01	; 1
    3526:	49 f4       	brne	.+18     	; 0x353a <SevenSegmentBlink+0x22>
	{
		/*if it is equal 1 then this is the second timer we enter this function*/
		/*stop seven segment*/
		Seven_segment_disable(UNIT);
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
		Seven_segment_disable(TENS);
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <Seven_segment_disable>
		/*set prev to zero*/
		prev = 0 ;
    3534:	10 92 72 01 	sts	0x0172, r1
    3538:	17 c0       	rjmp	.+46     	; 0x3568 <SevenSegmentBlink+0x50>
	}
	else
	{
		/*then this is the first time we visit this function so we display the value of the 
		seven segment*/
		SevenSegmentWriteFloat(A,LSB,setTemp);
    353a:	80 91 68 01 	lds	r24, 0x0168
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <SevenSegmentWriteFloat>
		SevenSegmentWriteFloat(B,MSB,setTemp);
    354e:	80 91 68 01 	lds	r24, 0x0168
    3552:	28 2f       	mov	r18, r24
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	61 e0       	ldi	r22, 0x01	; 1
    355e:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <SevenSegmentWriteFloat>
		/*set prev to zero*/
		prev = 1 ;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	80 93 72 01 	sts	0x0172, r24
	}
}
    3568:	cf 91       	pop	r28
    356a:	df 91       	pop	r29
    356c:	08 95       	ret

0000356e <__vector_1>:


/************************************************************************/
/*                           Up Button ISR                              */
ISR (EXT_INT0_VECT)
{
    356e:	1f 92       	push	r1
    3570:	0f 92       	push	r0
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	0f 92       	push	r0
    3576:	11 24       	eor	r1, r1
    3578:	8f 93       	push	r24
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
	/*check on state*/
	if (state != SET)
    3582:	80 91 6a 01 	lds	r24, 0x016A
    3586:	82 30       	cpi	r24, 0x02	; 2
    3588:	21 f0       	breq	.+8      	; 0x3592 <__vector_1+0x24>
	{
		/*if state was not equal SET then this is the first interrupt
		then set state to SET*/
		state = SET;
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	80 93 6a 01 	sts	0x016A, r24
    3590:	0d c0       	rjmp	.+26     	; 0x35ac <__vector_1+0x3e>
	}
	else
	{
		/*then we pressed the button in setting mode*/
		/*we check if the setTemp value is larger than or equal 75*/
		if (setTemp >= 75)
    3592:	80 91 68 01 	lds	r24, 0x0168
    3596:	8b 34       	cpi	r24, 0x4B	; 75
    3598:	20 f0       	brcs	.+8      	; 0x35a2 <__vector_1+0x34>
		{
			/*if yes the put it by 75*/
			setTemp = 75 ;
    359a:	8b e4       	ldi	r24, 0x4B	; 75
    359c:	80 93 68 01 	sts	0x0168, r24
    35a0:	05 c0       	rjmp	.+10     	; 0x35ac <__vector_1+0x3e>
		}
		else
		{
			/*if no then increase it by 5*/
			setTemp = setTemp + 5 ;
    35a2:	80 91 68 01 	lds	r24, 0x0168
    35a6:	8b 5f       	subi	r24, 0xFB	; 251
    35a8:	80 93 68 01 	sts	0x0168, r24
		}
	}
	/*but both timerFlag and counterFlag equal zero*/
	timerFlag = 0;
    35ac:	10 92 6c 01 	sts	0x016C, r1
	counterFlag = 0;
    35b0:	10 92 6d 01 	sts	0x016D, r1
}
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	8f 91       	pop	r24
    35ba:	0f 90       	pop	r0
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	0f 90       	pop	r0
    35c0:	1f 90       	pop	r1
    35c2:	18 95       	reti

000035c4 <__vector_2>:


/************************************************************************/
/*                         DOWN Button ISR                              */
ISR (EXT_INT1_VECT)
{
    35c4:	1f 92       	push	r1
    35c6:	0f 92       	push	r0
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	0f 92       	push	r0
    35cc:	11 24       	eor	r1, r1
    35ce:	8f 93       	push	r24
    35d0:	df 93       	push	r29
    35d2:	cf 93       	push	r28
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62
	/*check on state*/
	if (state != SET)
    35d8:	80 91 6a 01 	lds	r24, 0x016A
    35dc:	82 30       	cpi	r24, 0x02	; 2
    35de:	21 f0       	breq	.+8      	; 0x35e8 <__vector_2+0x24>
	{
		/*if state was not equal SET then this is the first interrupt
		then set state to SET*/
		state = SET;
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	80 93 6a 01 	sts	0x016A, r24
    35e6:	0d c0       	rjmp	.+26     	; 0x3602 <__vector_2+0x3e>
	}
	else
	{
		/*then we pressed the button in setting mode*/
		/*we check if the setTemp value is smaller than or equal 35*/
		if (setTemp <= 35)
    35e8:	80 91 68 01 	lds	r24, 0x0168
    35ec:	84 32       	cpi	r24, 0x24	; 36
    35ee:	20 f4       	brcc	.+8      	; 0x35f8 <__vector_2+0x34>
		{
			/*if yes the put it by 35*/
			setTemp = 35 ;
    35f0:	83 e2       	ldi	r24, 0x23	; 35
    35f2:	80 93 68 01 	sts	0x0168, r24
    35f6:	05 c0       	rjmp	.+10     	; 0x3602 <__vector_2+0x3e>
		}
		else
		{
			/*if no then decrease it by 5*/
			setTemp = setTemp - 5 ;
    35f8:	80 91 68 01 	lds	r24, 0x0168
    35fc:	85 50       	subi	r24, 0x05	; 5
    35fe:	80 93 68 01 	sts	0x0168, r24
		}
	}
	/*but both timerFlag and counterFlag equal zero*/
	timerFlag = 0;
    3602:	10 92 6c 01 	sts	0x016C, r1
	counterFlag = 0;
    3606:	10 92 6d 01 	sts	0x016D, r1
}
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	8f 91       	pop	r24
    3610:	0f 90       	pop	r0
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	0f 90       	pop	r0
    3616:	1f 90       	pop	r1
    3618:	18 95       	reti

0000361a <__vector_3>:


/************************************************************************/
/*                        ON/OFF Button ISR                             */
ISR (EXT_INT2_VECT)
{
    361a:	1f 92       	push	r1
    361c:	0f 92       	push	r0
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	0f 92       	push	r0
    3622:	11 24       	eor	r1, r1
    3624:	8f 93       	push	r24
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
	/*check on state*/
	if (state == OFF)
    362e:	80 91 6a 01 	lds	r24, 0x016A
    3632:	88 23       	and	r24, r24
    3634:	21 f4       	brne	.+8      	; 0x363e <__vector_3+0x24>
	{
		/*if Off make it ON*/
		state = ON;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	80 93 6a 01 	sts	0x016A, r24
    363c:	06 c0       	rjmp	.+12     	; 0x364a <__vector_3+0x30>
	}
	else if (state == ON)
    363e:	80 91 6a 01 	lds	r24, 0x016A
    3642:	81 30       	cpi	r24, 0x01	; 1
    3644:	11 f4       	brne	.+4      	; 0x364a <__vector_3+0x30>
	{
		/*if On make it Off*/
		state = OFF;
    3646:	10 92 6a 01 	sts	0x016A, r1
	}
	else
	{
		/*do nothing*/
	}
}
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	8f 91       	pop	r24
    3650:	0f 90       	pop	r0
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	0f 90       	pop	r0
    3656:	1f 90       	pop	r1
    3658:	18 95       	reti

0000365a <__vector_11>:


/************************************************************************/
/*                           Timer 0 ISR                                */
ISR(TIMER0_OVF_vect)
{
    365a:	1f 92       	push	r1
    365c:	0f 92       	push	r0
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	0f 92       	push	r0
    3662:	11 24       	eor	r1, r1
    3664:	2f 93       	push	r18
    3666:	3f 93       	push	r19
    3668:	4f 93       	push	r20
    366a:	5f 93       	push	r21
    366c:	6f 93       	push	r22
    366e:	7f 93       	push	r23
    3670:	8f 93       	push	r24
    3672:	9f 93       	push	r25
    3674:	af 93       	push	r26
    3676:	bf 93       	push	r27
    3678:	ef 93       	push	r30
    367a:	ff 93       	push	r31
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
	/*increase timerFlag*/
	timerFlag++;
    3684:	80 91 6c 01 	lds	r24, 0x016C
    3688:	8f 5f       	subi	r24, 0xFF	; 255
    368a:	80 93 6c 01 	sts	0x016C, r24
	/*check on state*/
	if (state == ON)
    368e:	80 91 6a 01 	lds	r24, 0x016A
    3692:	81 30       	cpi	r24, 0x01	; 1
    3694:	c9 f4       	brne	.+50     	; 0x36c8 <__vector_11+0x6e>
	{
		/*if on then check if timerFlag is 2*/
		if (timerFlag == 2)
    3696:	80 91 6c 01 	lds	r24, 0x016C
    369a:	82 30       	cpi	r24, 0x02	; 2
    369c:	a9 f4       	brne	.+42     	; 0x36c8 <__vector_11+0x6e>
		{
			/*if yes read temperature*/
			currentTemp = LM35_Read(ADC7);
    369e:	87 e0       	ldi	r24, 0x07	; 7
    36a0:	0e 94 65 11 	call	0x22ca	; 0x22ca <LM35_Read>
    36a4:	88 2f       	mov	r24, r24
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	a0 e0       	ldi	r26, 0x00	; 0
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	bc 01       	movw	r22, r24
    36ae:	cd 01       	movw	r24, r26
    36b0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	80 93 6e 01 	sts	0x016E, r24
    36bc:	90 93 6f 01 	sts	0x016F, r25
    36c0:	a0 93 70 01 	sts	0x0170, r26
    36c4:	b0 93 71 01 	sts	0x0171, r27
		}
	}
}
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	ff 91       	pop	r31
    36ce:	ef 91       	pop	r30
    36d0:	bf 91       	pop	r27
    36d2:	af 91       	pop	r26
    36d4:	9f 91       	pop	r25
    36d6:	8f 91       	pop	r24
    36d8:	7f 91       	pop	r23
    36da:	6f 91       	pop	r22
    36dc:	5f 91       	pop	r21
    36de:	4f 91       	pop	r20
    36e0:	3f 91       	pop	r19
    36e2:	2f 91       	pop	r18
    36e4:	0f 90       	pop	r0
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	0f 90       	pop	r0
    36ea:	1f 90       	pop	r1
    36ec:	18 95       	reti

000036ee <main>:
#define F_CPU 1000000UL
#include "Application/app.h"


int main(void)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    36f6:	0e 94 0a 18 	call	0x3014	; 0x3014 <APP_init>
	APP_start();
    36fa:	0e 94 cb 18 	call	0x3196	; 0x3196 <APP_start>
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	90 e0       	ldi	r25, 0x00	; 0
}
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <__udivmodqi4>:
    3708:	99 1b       	sub	r25, r25
    370a:	79 e0       	ldi	r23, 0x09	; 9
    370c:	04 c0       	rjmp	.+8      	; 0x3716 <__udivmodqi4_ep>

0000370e <__udivmodqi4_loop>:
    370e:	99 1f       	adc	r25, r25
    3710:	96 17       	cp	r25, r22
    3712:	08 f0       	brcs	.+2      	; 0x3716 <__udivmodqi4_ep>
    3714:	96 1b       	sub	r25, r22

00003716 <__udivmodqi4_ep>:
    3716:	88 1f       	adc	r24, r24
    3718:	7a 95       	dec	r23
    371a:	c9 f7       	brne	.-14     	; 0x370e <__udivmodqi4_loop>
    371c:	80 95       	com	r24
    371e:	08 95       	ret

00003720 <__udivmodsi4>:
    3720:	a1 e2       	ldi	r26, 0x21	; 33
    3722:	1a 2e       	mov	r1, r26
    3724:	aa 1b       	sub	r26, r26
    3726:	bb 1b       	sub	r27, r27
    3728:	fd 01       	movw	r30, r26
    372a:	0d c0       	rjmp	.+26     	; 0x3746 <__udivmodsi4_ep>

0000372c <__udivmodsi4_loop>:
    372c:	aa 1f       	adc	r26, r26
    372e:	bb 1f       	adc	r27, r27
    3730:	ee 1f       	adc	r30, r30
    3732:	ff 1f       	adc	r31, r31
    3734:	a2 17       	cp	r26, r18
    3736:	b3 07       	cpc	r27, r19
    3738:	e4 07       	cpc	r30, r20
    373a:	f5 07       	cpc	r31, r21
    373c:	20 f0       	brcs	.+8      	; 0x3746 <__udivmodsi4_ep>
    373e:	a2 1b       	sub	r26, r18
    3740:	b3 0b       	sbc	r27, r19
    3742:	e4 0b       	sbc	r30, r20
    3744:	f5 0b       	sbc	r31, r21

00003746 <__udivmodsi4_ep>:
    3746:	66 1f       	adc	r22, r22
    3748:	77 1f       	adc	r23, r23
    374a:	88 1f       	adc	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	1a 94       	dec	r1
    3750:	69 f7       	brne	.-38     	; 0x372c <__udivmodsi4_loop>
    3752:	60 95       	com	r22
    3754:	70 95       	com	r23
    3756:	80 95       	com	r24
    3758:	90 95       	com	r25
    375a:	9b 01       	movw	r18, r22
    375c:	ac 01       	movw	r20, r24
    375e:	bd 01       	movw	r22, r26
    3760:	cf 01       	movw	r24, r30
    3762:	08 95       	ret

00003764 <__prologue_saves__>:
    3764:	2f 92       	push	r2
    3766:	3f 92       	push	r3
    3768:	4f 92       	push	r4
    376a:	5f 92       	push	r5
    376c:	6f 92       	push	r6
    376e:	7f 92       	push	r7
    3770:	8f 92       	push	r8
    3772:	9f 92       	push	r9
    3774:	af 92       	push	r10
    3776:	bf 92       	push	r11
    3778:	cf 92       	push	r12
    377a:	df 92       	push	r13
    377c:	ef 92       	push	r14
    377e:	ff 92       	push	r15
    3780:	0f 93       	push	r16
    3782:	1f 93       	push	r17
    3784:	cf 93       	push	r28
    3786:	df 93       	push	r29
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	ca 1b       	sub	r28, r26
    378e:	db 0b       	sbc	r29, r27
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	09 94       	ijmp

0000379c <__epilogue_restores__>:
    379c:	2a 88       	ldd	r2, Y+18	; 0x12
    379e:	39 88       	ldd	r3, Y+17	; 0x11
    37a0:	48 88       	ldd	r4, Y+16	; 0x10
    37a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    37a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    37a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    37a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    37aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    37ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    37ae:	b9 84       	ldd	r11, Y+9	; 0x09
    37b0:	c8 84       	ldd	r12, Y+8	; 0x08
    37b2:	df 80       	ldd	r13, Y+7	; 0x07
    37b4:	ee 80       	ldd	r14, Y+6	; 0x06
    37b6:	fd 80       	ldd	r15, Y+5	; 0x05
    37b8:	0c 81       	ldd	r16, Y+4	; 0x04
    37ba:	1b 81       	ldd	r17, Y+3	; 0x03
    37bc:	aa 81       	ldd	r26, Y+2	; 0x02
    37be:	b9 81       	ldd	r27, Y+1	; 0x01
    37c0:	ce 0f       	add	r28, r30
    37c2:	d1 1d       	adc	r29, r1
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	ed 01       	movw	r28, r26
    37d0:	08 95       	ret

000037d2 <ceil>:
    37d2:	3b d0       	rcall	.+118    	; 0x384a <__fp_trunc>
    37d4:	80 f0       	brcs	.+32     	; 0x37f6 <ceil+0x24>
    37d6:	9f 37       	cpi	r25, 0x7F	; 127
    37d8:	40 f4       	brcc	.+16     	; 0x37ea <ceil+0x18>
    37da:	91 11       	cpse	r25, r1
    37dc:	0e f4       	brtc	.+2      	; 0x37e0 <ceil+0xe>
    37de:	4d c0       	rjmp	.+154    	; 0x387a <__fp_szero>
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	70 e0       	ldi	r23, 0x00	; 0
    37e4:	80 e8       	ldi	r24, 0x80	; 128
    37e6:	9f e3       	ldi	r25, 0x3F	; 63
    37e8:	08 95       	ret
    37ea:	26 f0       	brts	.+8      	; 0x37f4 <ceil+0x22>
    37ec:	1b 16       	cp	r1, r27
    37ee:	61 1d       	adc	r22, r1
    37f0:	71 1d       	adc	r23, r1
    37f2:	81 1d       	adc	r24, r1
    37f4:	01 c0       	rjmp	.+2      	; 0x37f8 <__fp_mintl>
    37f6:	1b c0       	rjmp	.+54     	; 0x382e <__fp_mpack>

000037f8 <__fp_mintl>:
    37f8:	88 23       	and	r24, r24
    37fa:	71 f4       	brne	.+28     	; 0x3818 <__fp_mintl+0x20>
    37fc:	77 23       	and	r23, r23
    37fe:	21 f0       	breq	.+8      	; 0x3808 <__fp_mintl+0x10>
    3800:	98 50       	subi	r25, 0x08	; 8
    3802:	87 2b       	or	r24, r23
    3804:	76 2f       	mov	r23, r22
    3806:	07 c0       	rjmp	.+14     	; 0x3816 <__fp_mintl+0x1e>
    3808:	66 23       	and	r22, r22
    380a:	11 f4       	brne	.+4      	; 0x3810 <__fp_mintl+0x18>
    380c:	99 27       	eor	r25, r25
    380e:	0d c0       	rjmp	.+26     	; 0x382a <__fp_mintl+0x32>
    3810:	90 51       	subi	r25, 0x10	; 16
    3812:	86 2b       	or	r24, r22
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	2a f0       	brmi	.+10     	; 0x3824 <__fp_mintl+0x2c>
    381a:	9a 95       	dec	r25
    381c:	66 0f       	add	r22, r22
    381e:	77 1f       	adc	r23, r23
    3820:	88 1f       	adc	r24, r24
    3822:	da f7       	brpl	.-10     	; 0x381a <__fp_mintl+0x22>
    3824:	88 0f       	add	r24, r24
    3826:	96 95       	lsr	r25
    3828:	87 95       	ror	r24
    382a:	97 f9       	bld	r25, 7
    382c:	08 95       	ret

0000382e <__fp_mpack>:
    382e:	9f 3f       	cpi	r25, 0xFF	; 255
    3830:	31 f0       	breq	.+12     	; 0x383e <__fp_mpack_finite+0xc>

00003832 <__fp_mpack_finite>:
    3832:	91 50       	subi	r25, 0x01	; 1
    3834:	20 f4       	brcc	.+8      	; 0x383e <__fp_mpack_finite+0xc>
    3836:	87 95       	ror	r24
    3838:	77 95       	ror	r23
    383a:	67 95       	ror	r22
    383c:	b7 95       	ror	r27
    383e:	88 0f       	add	r24, r24
    3840:	91 1d       	adc	r25, r1
    3842:	96 95       	lsr	r25
    3844:	87 95       	ror	r24
    3846:	97 f9       	bld	r25, 7
    3848:	08 95       	ret

0000384a <__fp_trunc>:
    384a:	25 d0       	rcall	.+74     	; 0x3896 <__fp_splitA>
    384c:	a0 f0       	brcs	.+40     	; 0x3876 <__fp_trunc+0x2c>
    384e:	be e7       	ldi	r27, 0x7E	; 126
    3850:	b9 17       	cp	r27, r25
    3852:	88 f4       	brcc	.+34     	; 0x3876 <__fp_trunc+0x2c>
    3854:	bb 27       	eor	r27, r27
    3856:	9f 38       	cpi	r25, 0x8F	; 143
    3858:	60 f4       	brcc	.+24     	; 0x3872 <__fp_trunc+0x28>
    385a:	16 16       	cp	r1, r22
    385c:	b1 1d       	adc	r27, r1
    385e:	67 2f       	mov	r22, r23
    3860:	78 2f       	mov	r23, r24
    3862:	88 27       	eor	r24, r24
    3864:	98 5f       	subi	r25, 0xF8	; 248
    3866:	f7 cf       	rjmp	.-18     	; 0x3856 <__fp_trunc+0xc>
    3868:	86 95       	lsr	r24
    386a:	77 95       	ror	r23
    386c:	67 95       	ror	r22
    386e:	b1 1d       	adc	r27, r1
    3870:	93 95       	inc	r25
    3872:	96 39       	cpi	r25, 0x96	; 150
    3874:	c8 f3       	brcs	.-14     	; 0x3868 <__fp_trunc+0x1e>
    3876:	08 95       	ret

00003878 <__fp_zero>:
    3878:	e8 94       	clt

0000387a <__fp_szero>:
    387a:	bb 27       	eor	r27, r27
    387c:	66 27       	eor	r22, r22
    387e:	77 27       	eor	r23, r23
    3880:	cb 01       	movw	r24, r22
    3882:	97 f9       	bld	r25, 7
    3884:	08 95       	ret

00003886 <__fp_split3>:
    3886:	57 fd       	sbrc	r21, 7
    3888:	90 58       	subi	r25, 0x80	; 128
    388a:	44 0f       	add	r20, r20
    388c:	55 1f       	adc	r21, r21
    388e:	59 f0       	breq	.+22     	; 0x38a6 <__fp_splitA+0x10>
    3890:	5f 3f       	cpi	r21, 0xFF	; 255
    3892:	71 f0       	breq	.+28     	; 0x38b0 <__fp_splitA+0x1a>
    3894:	47 95       	ror	r20

00003896 <__fp_splitA>:
    3896:	88 0f       	add	r24, r24
    3898:	97 fb       	bst	r25, 7
    389a:	99 1f       	adc	r25, r25
    389c:	61 f0       	breq	.+24     	; 0x38b6 <__fp_splitA+0x20>
    389e:	9f 3f       	cpi	r25, 0xFF	; 255
    38a0:	79 f0       	breq	.+30     	; 0x38c0 <__fp_splitA+0x2a>
    38a2:	87 95       	ror	r24
    38a4:	08 95       	ret
    38a6:	12 16       	cp	r1, r18
    38a8:	13 06       	cpc	r1, r19
    38aa:	14 06       	cpc	r1, r20
    38ac:	55 1f       	adc	r21, r21
    38ae:	f2 cf       	rjmp	.-28     	; 0x3894 <__fp_split3+0xe>
    38b0:	46 95       	lsr	r20
    38b2:	f1 df       	rcall	.-30     	; 0x3896 <__fp_splitA>
    38b4:	08 c0       	rjmp	.+16     	; 0x38c6 <__fp_splitA+0x30>
    38b6:	16 16       	cp	r1, r22
    38b8:	17 06       	cpc	r1, r23
    38ba:	18 06       	cpc	r1, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	f1 cf       	rjmp	.-30     	; 0x38a2 <__fp_splitA+0xc>
    38c0:	86 95       	lsr	r24
    38c2:	71 05       	cpc	r23, r1
    38c4:	61 05       	cpc	r22, r1
    38c6:	08 94       	sec
    38c8:	08 95       	ret

000038ca <_exit>:
    38ca:	f8 94       	cli

000038cc <__stop_program>:
    38cc:	ff cf       	rjmp	.-2      	; 0x38cc <__stop_program>
